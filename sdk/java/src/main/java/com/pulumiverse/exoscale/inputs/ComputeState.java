// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ComputeState extends com.pulumi.resources.ResourceArgs {

    public static final ComputeState Empty = new ComputeState();

    /**
     * A list of anti-affinity groups (IDs; at creation time only; conflicts with `affinity_groups`).
     * 
     */
    @Import(name="affinityGroupIds")
    private @Nullable Output<List<String>> affinityGroupIds;

    /**
     * @return A list of anti-affinity groups (IDs; at creation time only; conflicts with `affinity_groups`).
     * 
     */
    public Optional<Output<List<String>>> affinityGroupIds() {
        return Optional.ofNullable(this.affinityGroupIds);
    }

    /**
     * A list of anti-affinity groups (names; at creation time only; conflicts with `affinity_group_ids`).
     * 
     */
    @Import(name="affinityGroups")
    private @Nullable Output<List<String>> affinityGroups;

    /**
     * @return A list of anti-affinity groups (names; at creation time only; conflicts with `affinity_group_ids`).
     * 
     */
    public Optional<Output<List<String>>> affinityGroups() {
        return Optional.ofNullable(this.affinityGroups);
    }

    /**
     * The instance disk size (GiB; at least `10`).
     * 
     */
    @Import(name="diskSize")
    private @Nullable Output<Integer> diskSize;

    /**
     * @return The instance disk size (GiB; at least `10`).
     * 
     */
    public Optional<Output<Integer>> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }

    /**
     * The displayed instance name. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS&#39; *hostname* during creation, so the value must contain only alphanumeric and hyphen (&#34;-&#34;) characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The displayed instance name. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS&#39; *hostname* during creation, so the value must contain only alphanumeric and hyphen (&#34;-&#34;) characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="gateway")
    private @Nullable Output<String> gateway;

    public Optional<Output<String>> gateway() {
        return Optional.ofNullable(this.gateway);
    }

    /**
     * The instance hostname, must contain only alphanumeric and hyphen (`-`) characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically. Note: updating this attribute&#39;s value requires to reboot the instance.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The instance hostname, must contain only alphanumeric and hyphen (`-`) characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically. Note: updating this attribute&#39;s value requires to reboot the instance.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * Enable IPv4 on the instance (only supported value is `true`).
     * 
     */
    @Import(name="ip4")
    private @Nullable Output<Boolean> ip4;

    /**
     * @return Enable IPv4 on the instance (only supported value is `true`).
     * 
     */
    public Optional<Output<Boolean>> ip4() {
        return Optional.ofNullable(this.ip4);
    }

    /**
     * Enable IPv6 on the instance (boolean; default: `false`).
     * 
     */
    @Import(name="ip6")
    private @Nullable Output<Boolean> ip6;

    /**
     * @return Enable IPv6 on the instance (boolean; default: `false`).
     * 
     */
    public Optional<Output<Boolean>> ip6() {
        return Optional.ofNullable(this.ip6);
    }

    /**
     * The instance (main network interface) IPv6 address (if enabled).
     * 
     */
    @Import(name="ip6Address")
    private @Nullable Output<String> ip6Address;

    /**
     * @return The instance (main network interface) IPv6 address (if enabled).
     * 
     */
    public Optional<Output<String>> ip6Address() {
        return Optional.ofNullable(this.ip6Address);
    }

    @Import(name="ip6Cidr")
    private @Nullable Output<String> ip6Cidr;

    public Optional<Output<String>> ip6Cidr() {
        return Optional.ofNullable(this.ip6Cidr);
    }

    /**
     * The instance (main network interface) IPv4 address.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The instance (main network interface) IPv4 address.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The SSH keypair (name) to authorize in the instance.
     * 
     */
    @Import(name="keyPair")
    private @Nullable Output<String> keyPair;

    /**
     * @return The SSH keypair (name) to authorize in the instance.
     * 
     */
    public Optional<Output<String>> keyPair() {
        return Optional.ofNullable(this.keyPair);
    }

    /**
     * The keyboard layout configuration (`de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`; at creation time only).
     * 
     */
    @Import(name="keyboard")
    private @Nullable Output<String> keyboard;

    /**
     * @return The keyboard layout configuration (`de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`; at creation time only).
     * 
     */
    public Optional<Output<String>> keyboard() {
        return Optional.ofNullable(this.keyboard);
    }

    /**
     * (Deprecated) The instance hostname. Please use the `hostname` argument instead.
     * 
     * @deprecated
     * use `hostname` attribute instead
     * 
     */
    @Deprecated /* use `hostname` attribute instead */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Deprecated) The instance hostname. Please use the `hostname` argument instead.
     * 
     * @deprecated
     * use `hostname` attribute instead
     * 
     */
    @Deprecated /* use `hostname` attribute instead */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The instance initial password and/or encrypted password.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The instance initial password and/or encrypted password.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The instance reverse DNS record (must end with a `.`; e.g: `my-instance.example.net.`).
     * 
     */
    @Import(name="reverseDns")
    private @Nullable Output<String> reverseDns;

    /**
     * @return The instance reverse DNS record (must end with a `.`; e.g: `my-instance.example.net.`).
     * 
     */
    public Optional<Output<String>> reverseDns() {
        return Optional.ofNullable(this.reverseDns);
    }

    /**
     * A list of security groups (IDs; conflicts with `security_groups`).
     * 
     */
    @Import(name="securityGroupIds")
    private @Nullable Output<List<String>> securityGroupIds;

    /**
     * @return A list of security groups (IDs; conflicts with `security_groups`).
     * 
     */
    public Optional<Output<List<String>>> securityGroupIds() {
        return Optional.ofNullable(this.securityGroupIds);
    }

    /**
     * A list of security groups (names; conflicts with `security_group_ids`).
     * 
     */
    @Import(name="securityGroups")
    private @Nullable Output<List<String>> securityGroups;

    /**
     * @return A list of security groups (names; conflicts with `security_group_ids`).
     * 
     */
    public Optional<Output<List<String>>> securityGroups() {
        return Optional.ofNullable(this.securityGroups);
    }

    /**
     * The instance size (`Tiny`, `Small`, `Medium`, `Large`, etc.)
     * 
     */
    @Import(name="size")
    private @Nullable Output<String> size;

    /**
     * @return The instance size (`Tiny`, `Small`, `Medium`, `Large`, etc.)
     * 
     */
    public Optional<Output<String>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * The instance state (`Running` or `Stopped`; default: `Running`)
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The instance state (`Running` or `Stopped`; default: `Running`)
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A map of tags (key/value). To remove all tags, set `tags = {}`.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags (key/value). To remove all tags, set `tags = {}`.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The compute instance template (name). Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.
     * 
     */
    @Import(name="template")
    private @Nullable Output<String> template;

    /**
     * @return The compute instance template (name). Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.
     * 
     */
    public Optional<Output<String>> template() {
        return Optional.ofNullable(this.template);
    }

    /**
     * The compute instance template (ID). Usage of the `exoscale.getComputeTemplate` data source is recommended.
     * 
     */
    @Import(name="templateId")
    private @Nullable Output<String> templateId;

    /**
     * @return The compute instance template (ID). Usage of the `exoscale.getComputeTemplate` data source is recommended.
     * 
     */
    public Optional<Output<String>> templateId() {
        return Optional.ofNullable(this.templateId);
    }

    /**
     * cloud-init configuration (no need to base64-encode or gzip it as the provider will take care of it).
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    /**
     * @return cloud-init configuration (no need to base64-encode or gzip it as the provider will take care of it).
     * 
     */
    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    /**
     * was the cloud-init configuration base64 encoded
     * 
     */
    @Import(name="userDataBase64")
    private @Nullable Output<Boolean> userDataBase64;

    /**
     * @return was the cloud-init configuration base64 encoded
     * 
     */
    public Optional<Output<Boolean>> userDataBase64() {
        return Optional.ofNullable(this.userDataBase64);
    }

    /**
     * The user to use to connect to the instance. If you&#39;ve referenced a *custom template* in the resource, use the `exoscale.getComputeTemplate` data source `username` attribute instead.
     * 
     * @deprecated
     * broken, use `compute_template` data source `username` attribute
     * 
     */
    @Deprecated /* broken, use `compute_template` data source `username` attribute */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The user to use to connect to the instance. If you&#39;ve referenced a *custom template* in the resource, use the `exoscale.getComputeTemplate` data source `username` attribute instead.
     * 
     * @deprecated
     * broken, use `compute_template` data source `username` attribute
     * 
     */
    @Deprecated /* broken, use `compute_template` data source `username` attribute */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * The Exoscale Zone name.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The Exoscale Zone name.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private ComputeState() {}

    private ComputeState(ComputeState $) {
        this.affinityGroupIds = $.affinityGroupIds;
        this.affinityGroups = $.affinityGroups;
        this.diskSize = $.diskSize;
        this.displayName = $.displayName;
        this.gateway = $.gateway;
        this.hostname = $.hostname;
        this.ip4 = $.ip4;
        this.ip6 = $.ip6;
        this.ip6Address = $.ip6Address;
        this.ip6Cidr = $.ip6Cidr;
        this.ipAddress = $.ipAddress;
        this.keyPair = $.keyPair;
        this.keyboard = $.keyboard;
        this.name = $.name;
        this.password = $.password;
        this.reverseDns = $.reverseDns;
        this.securityGroupIds = $.securityGroupIds;
        this.securityGroups = $.securityGroups;
        this.size = $.size;
        this.state = $.state;
        this.tags = $.tags;
        this.template = $.template;
        this.templateId = $.templateId;
        this.userData = $.userData;
        this.userDataBase64 = $.userDataBase64;
        this.username = $.username;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComputeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComputeState $;

        public Builder() {
            $ = new ComputeState();
        }

        public Builder(ComputeState defaults) {
            $ = new ComputeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param affinityGroupIds A list of anti-affinity groups (IDs; at creation time only; conflicts with `affinity_groups`).
         * 
         * @return builder
         * 
         */
        public Builder affinityGroupIds(@Nullable Output<List<String>> affinityGroupIds) {
            $.affinityGroupIds = affinityGroupIds;
            return this;
        }

        /**
         * @param affinityGroupIds A list of anti-affinity groups (IDs; at creation time only; conflicts with `affinity_groups`).
         * 
         * @return builder
         * 
         */
        public Builder affinityGroupIds(List<String> affinityGroupIds) {
            return affinityGroupIds(Output.of(affinityGroupIds));
        }

        /**
         * @param affinityGroupIds A list of anti-affinity groups (IDs; at creation time only; conflicts with `affinity_groups`).
         * 
         * @return builder
         * 
         */
        public Builder affinityGroupIds(String... affinityGroupIds) {
            return affinityGroupIds(List.of(affinityGroupIds));
        }

        /**
         * @param affinityGroups A list of anti-affinity groups (names; at creation time only; conflicts with `affinity_group_ids`).
         * 
         * @return builder
         * 
         */
        public Builder affinityGroups(@Nullable Output<List<String>> affinityGroups) {
            $.affinityGroups = affinityGroups;
            return this;
        }

        /**
         * @param affinityGroups A list of anti-affinity groups (names; at creation time only; conflicts with `affinity_group_ids`).
         * 
         * @return builder
         * 
         */
        public Builder affinityGroups(List<String> affinityGroups) {
            return affinityGroups(Output.of(affinityGroups));
        }

        /**
         * @param affinityGroups A list of anti-affinity groups (names; at creation time only; conflicts with `affinity_group_ids`).
         * 
         * @return builder
         * 
         */
        public Builder affinityGroups(String... affinityGroups) {
            return affinityGroups(List.of(affinityGroups));
        }

        /**
         * @param diskSize The instance disk size (GiB; at least `10`).
         * 
         * @return builder
         * 
         */
        public Builder diskSize(@Nullable Output<Integer> diskSize) {
            $.diskSize = diskSize;
            return this;
        }

        /**
         * @param diskSize The instance disk size (GiB; at least `10`).
         * 
         * @return builder
         * 
         */
        public Builder diskSize(Integer diskSize) {
            return diskSize(Output.of(diskSize));
        }

        /**
         * @param displayName The displayed instance name. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS&#39; *hostname* during creation, so the value must contain only alphanumeric and hyphen (&#34;-&#34;) characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The displayed instance name. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS&#39; *hostname* during creation, so the value must contain only alphanumeric and hyphen (&#34;-&#34;) characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder gateway(@Nullable Output<String> gateway) {
            $.gateway = gateway;
            return this;
        }

        public Builder gateway(String gateway) {
            return gateway(Output.of(gateway));
        }

        /**
         * @param hostname The instance hostname, must contain only alphanumeric and hyphen (`-`) characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically. Note: updating this attribute&#39;s value requires to reboot the instance.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The instance hostname, must contain only alphanumeric and hyphen (`-`) characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically. Note: updating this attribute&#39;s value requires to reboot the instance.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param ip4 Enable IPv4 on the instance (only supported value is `true`).
         * 
         * @return builder
         * 
         */
        public Builder ip4(@Nullable Output<Boolean> ip4) {
            $.ip4 = ip4;
            return this;
        }

        /**
         * @param ip4 Enable IPv4 on the instance (only supported value is `true`).
         * 
         * @return builder
         * 
         */
        public Builder ip4(Boolean ip4) {
            return ip4(Output.of(ip4));
        }

        /**
         * @param ip6 Enable IPv6 on the instance (boolean; default: `false`).
         * 
         * @return builder
         * 
         */
        public Builder ip6(@Nullable Output<Boolean> ip6) {
            $.ip6 = ip6;
            return this;
        }

        /**
         * @param ip6 Enable IPv6 on the instance (boolean; default: `false`).
         * 
         * @return builder
         * 
         */
        public Builder ip6(Boolean ip6) {
            return ip6(Output.of(ip6));
        }

        /**
         * @param ip6Address The instance (main network interface) IPv6 address (if enabled).
         * 
         * @return builder
         * 
         */
        public Builder ip6Address(@Nullable Output<String> ip6Address) {
            $.ip6Address = ip6Address;
            return this;
        }

        /**
         * @param ip6Address The instance (main network interface) IPv6 address (if enabled).
         * 
         * @return builder
         * 
         */
        public Builder ip6Address(String ip6Address) {
            return ip6Address(Output.of(ip6Address));
        }

        public Builder ip6Cidr(@Nullable Output<String> ip6Cidr) {
            $.ip6Cidr = ip6Cidr;
            return this;
        }

        public Builder ip6Cidr(String ip6Cidr) {
            return ip6Cidr(Output.of(ip6Cidr));
        }

        /**
         * @param ipAddress The instance (main network interface) IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The instance (main network interface) IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param keyPair The SSH keypair (name) to authorize in the instance.
         * 
         * @return builder
         * 
         */
        public Builder keyPair(@Nullable Output<String> keyPair) {
            $.keyPair = keyPair;
            return this;
        }

        /**
         * @param keyPair The SSH keypair (name) to authorize in the instance.
         * 
         * @return builder
         * 
         */
        public Builder keyPair(String keyPair) {
            return keyPair(Output.of(keyPair));
        }

        /**
         * @param keyboard The keyboard layout configuration (`de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`; at creation time only).
         * 
         * @return builder
         * 
         */
        public Builder keyboard(@Nullable Output<String> keyboard) {
            $.keyboard = keyboard;
            return this;
        }

        /**
         * @param keyboard The keyboard layout configuration (`de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`; at creation time only).
         * 
         * @return builder
         * 
         */
        public Builder keyboard(String keyboard) {
            return keyboard(Output.of(keyboard));
        }

        /**
         * @param name (Deprecated) The instance hostname. Please use the `hostname` argument instead.
         * 
         * @return builder
         * 
         * @deprecated
         * use `hostname` attribute instead
         * 
         */
        @Deprecated /* use `hostname` attribute instead */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Deprecated) The instance hostname. Please use the `hostname` argument instead.
         * 
         * @return builder
         * 
         * @deprecated
         * use `hostname` attribute instead
         * 
         */
        @Deprecated /* use `hostname` attribute instead */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password The instance initial password and/or encrypted password.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The instance initial password and/or encrypted password.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param reverseDns The instance reverse DNS record (must end with a `.`; e.g: `my-instance.example.net.`).
         * 
         * @return builder
         * 
         */
        public Builder reverseDns(@Nullable Output<String> reverseDns) {
            $.reverseDns = reverseDns;
            return this;
        }

        /**
         * @param reverseDns The instance reverse DNS record (must end with a `.`; e.g: `my-instance.example.net.`).
         * 
         * @return builder
         * 
         */
        public Builder reverseDns(String reverseDns) {
            return reverseDns(Output.of(reverseDns));
        }

        /**
         * @param securityGroupIds A list of security groups (IDs; conflicts with `security_groups`).
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        /**
         * @param securityGroupIds A list of security groups (IDs; conflicts with `security_groups`).
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(List<String> securityGroupIds) {
            return securityGroupIds(Output.of(securityGroupIds));
        }

        /**
         * @param securityGroupIds A list of security groups (IDs; conflicts with `security_groups`).
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        /**
         * @param securityGroups A list of security groups (names; conflicts with `security_group_ids`).
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(@Nullable Output<List<String>> securityGroups) {
            $.securityGroups = securityGroups;
            return this;
        }

        /**
         * @param securityGroups A list of security groups (names; conflicts with `security_group_ids`).
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(List<String> securityGroups) {
            return securityGroups(Output.of(securityGroups));
        }

        /**
         * @param securityGroups A list of security groups (names; conflicts with `security_group_ids`).
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }

        /**
         * @param size The instance size (`Tiny`, `Small`, `Medium`, `Large`, etc.)
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<String> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The instance size (`Tiny`, `Small`, `Medium`, `Large`, etc.)
         * 
         * @return builder
         * 
         */
        public Builder size(String size) {
            return size(Output.of(size));
        }

        /**
         * @param state The instance state (`Running` or `Stopped`; default: `Running`)
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The instance state (`Running` or `Stopped`; default: `Running`)
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tags A map of tags (key/value). To remove all tags, set `tags = {}`.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags (key/value). To remove all tags, set `tags = {}`.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param template The compute instance template (name). Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.
         * 
         * @return builder
         * 
         */
        public Builder template(@Nullable Output<String> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template The compute instance template (name). Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.
         * 
         * @return builder
         * 
         */
        public Builder template(String template) {
            return template(Output.of(template));
        }

        /**
         * @param templateId The compute instance template (ID). Usage of the `exoscale.getComputeTemplate` data source is recommended.
         * 
         * @return builder
         * 
         */
        public Builder templateId(@Nullable Output<String> templateId) {
            $.templateId = templateId;
            return this;
        }

        /**
         * @param templateId The compute instance template (ID). Usage of the `exoscale.getComputeTemplate` data source is recommended.
         * 
         * @return builder
         * 
         */
        public Builder templateId(String templateId) {
            return templateId(Output.of(templateId));
        }

        /**
         * @param userData cloud-init configuration (no need to base64-encode or gzip it as the provider will take care of it).
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData cloud-init configuration (no need to base64-encode or gzip it as the provider will take care of it).
         * 
         * @return builder
         * 
         */
        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        /**
         * @param userDataBase64 was the cloud-init configuration base64 encoded
         * 
         * @return builder
         * 
         */
        public Builder userDataBase64(@Nullable Output<Boolean> userDataBase64) {
            $.userDataBase64 = userDataBase64;
            return this;
        }

        /**
         * @param userDataBase64 was the cloud-init configuration base64 encoded
         * 
         * @return builder
         * 
         */
        public Builder userDataBase64(Boolean userDataBase64) {
            return userDataBase64(Output.of(userDataBase64));
        }

        /**
         * @param username The user to use to connect to the instance. If you&#39;ve referenced a *custom template* in the resource, use the `exoscale.getComputeTemplate` data source `username` attribute instead.
         * 
         * @return builder
         * 
         * @deprecated
         * broken, use `compute_template` data source `username` attribute
         * 
         */
        @Deprecated /* broken, use `compute_template` data source `username` attribute */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The user to use to connect to the instance. If you&#39;ve referenced a *custom template* in the resource, use the `exoscale.getComputeTemplate` data source `username` attribute instead.
         * 
         * @return builder
         * 
         * @deprecated
         * broken, use `compute_template` data source `username` attribute
         * 
         */
        @Deprecated /* broken, use `compute_template` data source `username` attribute */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param zone The Exoscale Zone name.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The Exoscale Zone name.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public ComputeState build() {
            return $;
        }
    }

}
