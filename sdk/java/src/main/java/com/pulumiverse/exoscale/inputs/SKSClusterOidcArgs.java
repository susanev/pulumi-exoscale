// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SKSClusterOidcArgs extends com.pulumi.resources.ResourceArgs {

    public static final SKSClusterOidcArgs Empty = new SKSClusterOidcArgs();

    /**
     * The OpenID client ID.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return The OpenID client ID.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * An OpenID JWT claim to use as the user&#39;s group.
     * 
     */
    @Import(name="groupsClaim")
    private @Nullable Output<String> groupsClaim;

    /**
     * @return An OpenID JWT claim to use as the user&#39;s group.
     * 
     */
    public Optional<Output<String>> groupsClaim() {
        return Optional.ofNullable(this.groupsClaim);
    }

    /**
     * An OpenID prefix prepended to group claims.
     * 
     */
    @Import(name="groupsPrefix")
    private @Nullable Output<String> groupsPrefix;

    /**
     * @return An OpenID prefix prepended to group claims.
     * 
     */
    public Optional<Output<String>> groupsPrefix() {
        return Optional.ofNullable(this.groupsPrefix);
    }

    /**
     * The OpenID provider URL.
     * 
     */
    @Import(name="issuerUrl", required=true)
    private Output<String> issuerUrl;

    /**
     * @return The OpenID provider URL.
     * 
     */
    public Output<String> issuerUrl() {
        return this.issuerUrl;
    }

    /**
     * A map of key/value pairs that describes a required claim in the OpenID Token.
     * 
     */
    @Import(name="requiredClaim")
    private @Nullable Output<Map<String,String>> requiredClaim;

    /**
     * @return A map of key/value pairs that describes a required claim in the OpenID Token.
     * 
     */
    public Optional<Output<Map<String,String>>> requiredClaim() {
        return Optional.ofNullable(this.requiredClaim);
    }

    /**
     * An OpenID JWT claim to use as the user name.
     * 
     */
    @Import(name="usernameClaim")
    private @Nullable Output<String> usernameClaim;

    /**
     * @return An OpenID JWT claim to use as the user name.
     * 
     */
    public Optional<Output<String>> usernameClaim() {
        return Optional.ofNullable(this.usernameClaim);
    }

    /**
     * An OpenID prefix prepended to username claims.
     * 
     */
    @Import(name="usernamePrefix")
    private @Nullable Output<String> usernamePrefix;

    /**
     * @return An OpenID prefix prepended to username claims.
     * 
     */
    public Optional<Output<String>> usernamePrefix() {
        return Optional.ofNullable(this.usernamePrefix);
    }

    private SKSClusterOidcArgs() {}

    private SKSClusterOidcArgs(SKSClusterOidcArgs $) {
        this.clientId = $.clientId;
        this.groupsClaim = $.groupsClaim;
        this.groupsPrefix = $.groupsPrefix;
        this.issuerUrl = $.issuerUrl;
        this.requiredClaim = $.requiredClaim;
        this.usernameClaim = $.usernameClaim;
        this.usernamePrefix = $.usernamePrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SKSClusterOidcArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SKSClusterOidcArgs $;

        public Builder() {
            $ = new SKSClusterOidcArgs();
        }

        public Builder(SKSClusterOidcArgs defaults) {
            $ = new SKSClusterOidcArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId The OpenID client ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The OpenID client ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param groupsClaim An OpenID JWT claim to use as the user&#39;s group.
         * 
         * @return builder
         * 
         */
        public Builder groupsClaim(@Nullable Output<String> groupsClaim) {
            $.groupsClaim = groupsClaim;
            return this;
        }

        /**
         * @param groupsClaim An OpenID JWT claim to use as the user&#39;s group.
         * 
         * @return builder
         * 
         */
        public Builder groupsClaim(String groupsClaim) {
            return groupsClaim(Output.of(groupsClaim));
        }

        /**
         * @param groupsPrefix An OpenID prefix prepended to group claims.
         * 
         * @return builder
         * 
         */
        public Builder groupsPrefix(@Nullable Output<String> groupsPrefix) {
            $.groupsPrefix = groupsPrefix;
            return this;
        }

        /**
         * @param groupsPrefix An OpenID prefix prepended to group claims.
         * 
         * @return builder
         * 
         */
        public Builder groupsPrefix(String groupsPrefix) {
            return groupsPrefix(Output.of(groupsPrefix));
        }

        /**
         * @param issuerUrl The OpenID provider URL.
         * 
         * @return builder
         * 
         */
        public Builder issuerUrl(Output<String> issuerUrl) {
            $.issuerUrl = issuerUrl;
            return this;
        }

        /**
         * @param issuerUrl The OpenID provider URL.
         * 
         * @return builder
         * 
         */
        public Builder issuerUrl(String issuerUrl) {
            return issuerUrl(Output.of(issuerUrl));
        }

        /**
         * @param requiredClaim A map of key/value pairs that describes a required claim in the OpenID Token.
         * 
         * @return builder
         * 
         */
        public Builder requiredClaim(@Nullable Output<Map<String,String>> requiredClaim) {
            $.requiredClaim = requiredClaim;
            return this;
        }

        /**
         * @param requiredClaim A map of key/value pairs that describes a required claim in the OpenID Token.
         * 
         * @return builder
         * 
         */
        public Builder requiredClaim(Map<String,String> requiredClaim) {
            return requiredClaim(Output.of(requiredClaim));
        }

        /**
         * @param usernameClaim An OpenID JWT claim to use as the user name.
         * 
         * @return builder
         * 
         */
        public Builder usernameClaim(@Nullable Output<String> usernameClaim) {
            $.usernameClaim = usernameClaim;
            return this;
        }

        /**
         * @param usernameClaim An OpenID JWT claim to use as the user name.
         * 
         * @return builder
         * 
         */
        public Builder usernameClaim(String usernameClaim) {
            return usernameClaim(Output.of(usernameClaim));
        }

        /**
         * @param usernamePrefix An OpenID prefix prepended to username claims.
         * 
         * @return builder
         * 
         */
        public Builder usernamePrefix(@Nullable Output<String> usernamePrefix) {
            $.usernamePrefix = usernamePrefix;
            return this;
        }

        /**
         * @param usernamePrefix An OpenID prefix prepended to username claims.
         * 
         * @return builder
         * 
         */
        public Builder usernamePrefix(String usernamePrefix) {
            return usernamePrefix(Output.of(usernamePrefix));
        }

        public SKSClusterOidcArgs build() {
            $.clientId = Objects.requireNonNull($.clientId, "expected parameter 'clientId' to be non-null");
            $.issuerUrl = Objects.requireNonNull($.issuerUrl, "expected parameter 'issuerUrl' to be non-null");
            return $;
        }
    }

}
