// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseKafkaArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseKafkaArgs Empty = new DatabaseKafkaArgs();

    /**
     * Enable certificate-based authentication method.
     * 
     */
    @Import(name="enableCertAuth")
    private @Nullable Output<Boolean> enableCertAuth;

    /**
     * @return Enable certificate-based authentication method.
     * 
     */
    public Optional<Output<Boolean>> enableCertAuth() {
        return Optional.ofNullable(this.enableCertAuth);
    }

    /**
     * Enable Kafka Connect.
     * 
     */
    @Import(name="enableKafkaConnect")
    private @Nullable Output<Boolean> enableKafkaConnect;

    /**
     * @return Enable Kafka Connect.
     * 
     */
    public Optional<Output<Boolean>> enableKafkaConnect() {
        return Optional.ofNullable(this.enableKafkaConnect);
    }

    /**
     * Enable Kafka REST.
     * 
     */
    @Import(name="enableKafkaRest")
    private @Nullable Output<Boolean> enableKafkaRest;

    /**
     * @return Enable Kafka REST.
     * 
     */
    public Optional<Output<Boolean>> enableKafkaRest() {
        return Optional.ofNullable(this.enableKafkaRest);
    }

    /**
     * Enable SASL-based authentication method.
     * 
     */
    @Import(name="enableSaslAuth")
    private @Nullable Output<Boolean> enableSaslAuth;

    /**
     * @return Enable SASL-based authentication method.
     * 
     */
    public Optional<Output<Boolean>> enableSaslAuth() {
        return Optional.ofNullable(this.enableSaslAuth);
    }

    /**
     * Enable Schema Registry.
     * 
     */
    @Import(name="enableSchemaRegistry")
    private @Nullable Output<Boolean> enableSchemaRegistry;

    /**
     * @return Enable Schema Registry.
     * 
     */
    public Optional<Output<Boolean>> enableSchemaRegistry() {
        return Optional.ofNullable(this.enableSchemaRegistry);
    }

    /**
     * A list of CIDR blocks to allow incoming connections from.
     * 
     */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return A list of CIDR blocks to allow incoming connections from.
     * 
     */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
     * 
     */
    @Import(name="kafkaConnectSettings")
    private @Nullable Output<String> kafkaConnectSettings;

    /**
     * @return Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
     * 
     */
    public Optional<Output<String>> kafkaConnectSettings() {
        return Optional.ofNullable(this.kafkaConnectSettings);
    }

    /**
     * Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
     * 
     */
    @Import(name="kafkaRestSettings")
    private @Nullable Output<String> kafkaRestSettings;

    /**
     * @return Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
     * 
     */
    public Optional<Output<String>> kafkaRestSettings() {
        return Optional.ofNullable(this.kafkaRestSettings);
    }

    /**
     * Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
     * 
     */
    @Import(name="kafkaSettings")
    private @Nullable Output<String> kafkaSettings;

    /**
     * @return Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
     * 
     */
    public Optional<Output<String>> kafkaSettings() {
        return Optional.ofNullable(this.kafkaSettings);
    }

    /**
     * Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
     * 
     */
    @Import(name="schemaRegistrySettings")
    private @Nullable Output<String> schemaRegistrySettings;

    /**
     * @return Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
     * 
     */
    public Optional<Output<String>> schemaRegistrySettings() {
        return Optional.ofNullable(this.schemaRegistrySettings);
    }

    /**
     * PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private DatabaseKafkaArgs() {}

    private DatabaseKafkaArgs(DatabaseKafkaArgs $) {
        this.enableCertAuth = $.enableCertAuth;
        this.enableKafkaConnect = $.enableKafkaConnect;
        this.enableKafkaRest = $.enableKafkaRest;
        this.enableSaslAuth = $.enableSaslAuth;
        this.enableSchemaRegistry = $.enableSchemaRegistry;
        this.ipFilters = $.ipFilters;
        this.kafkaConnectSettings = $.kafkaConnectSettings;
        this.kafkaRestSettings = $.kafkaRestSettings;
        this.kafkaSettings = $.kafkaSettings;
        this.schemaRegistrySettings = $.schemaRegistrySettings;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseKafkaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseKafkaArgs $;

        public Builder() {
            $ = new DatabaseKafkaArgs();
        }

        public Builder(DatabaseKafkaArgs defaults) {
            $ = new DatabaseKafkaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableCertAuth Enable certificate-based authentication method.
         * 
         * @return builder
         * 
         */
        public Builder enableCertAuth(@Nullable Output<Boolean> enableCertAuth) {
            $.enableCertAuth = enableCertAuth;
            return this;
        }

        /**
         * @param enableCertAuth Enable certificate-based authentication method.
         * 
         * @return builder
         * 
         */
        public Builder enableCertAuth(Boolean enableCertAuth) {
            return enableCertAuth(Output.of(enableCertAuth));
        }

        /**
         * @param enableKafkaConnect Enable Kafka Connect.
         * 
         * @return builder
         * 
         */
        public Builder enableKafkaConnect(@Nullable Output<Boolean> enableKafkaConnect) {
            $.enableKafkaConnect = enableKafkaConnect;
            return this;
        }

        /**
         * @param enableKafkaConnect Enable Kafka Connect.
         * 
         * @return builder
         * 
         */
        public Builder enableKafkaConnect(Boolean enableKafkaConnect) {
            return enableKafkaConnect(Output.of(enableKafkaConnect));
        }

        /**
         * @param enableKafkaRest Enable Kafka REST.
         * 
         * @return builder
         * 
         */
        public Builder enableKafkaRest(@Nullable Output<Boolean> enableKafkaRest) {
            $.enableKafkaRest = enableKafkaRest;
            return this;
        }

        /**
         * @param enableKafkaRest Enable Kafka REST.
         * 
         * @return builder
         * 
         */
        public Builder enableKafkaRest(Boolean enableKafkaRest) {
            return enableKafkaRest(Output.of(enableKafkaRest));
        }

        /**
         * @param enableSaslAuth Enable SASL-based authentication method.
         * 
         * @return builder
         * 
         */
        public Builder enableSaslAuth(@Nullable Output<Boolean> enableSaslAuth) {
            $.enableSaslAuth = enableSaslAuth;
            return this;
        }

        /**
         * @param enableSaslAuth Enable SASL-based authentication method.
         * 
         * @return builder
         * 
         */
        public Builder enableSaslAuth(Boolean enableSaslAuth) {
            return enableSaslAuth(Output.of(enableSaslAuth));
        }

        /**
         * @param enableSchemaRegistry Enable Schema Registry.
         * 
         * @return builder
         * 
         */
        public Builder enableSchemaRegistry(@Nullable Output<Boolean> enableSchemaRegistry) {
            $.enableSchemaRegistry = enableSchemaRegistry;
            return this;
        }

        /**
         * @param enableSchemaRegistry Enable Schema Registry.
         * 
         * @return builder
         * 
         */
        public Builder enableSchemaRegistry(Boolean enableSchemaRegistry) {
            return enableSchemaRegistry(Output.of(enableSchemaRegistry));
        }

        /**
         * @param ipFilters A list of CIDR blocks to allow incoming connections from.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters A list of CIDR blocks to allow incoming connections from.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters A list of CIDR blocks to allow incoming connections from.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param kafkaConnectSettings Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
         * 
         * @return builder
         * 
         */
        public Builder kafkaConnectSettings(@Nullable Output<String> kafkaConnectSettings) {
            $.kafkaConnectSettings = kafkaConnectSettings;
            return this;
        }

        /**
         * @param kafkaConnectSettings Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
         * 
         * @return builder
         * 
         */
        public Builder kafkaConnectSettings(String kafkaConnectSettings) {
            return kafkaConnectSettings(Output.of(kafkaConnectSettings));
        }

        /**
         * @param kafkaRestSettings Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
         * 
         * @return builder
         * 
         */
        public Builder kafkaRestSettings(@Nullable Output<String> kafkaRestSettings) {
            $.kafkaRestSettings = kafkaRestSettings;
            return this;
        }

        /**
         * @param kafkaRestSettings Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
         * 
         * @return builder
         * 
         */
        public Builder kafkaRestSettings(String kafkaRestSettings) {
            return kafkaRestSettings(Output.of(kafkaRestSettings));
        }

        /**
         * @param kafkaSettings Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
         * 
         * @return builder
         * 
         */
        public Builder kafkaSettings(@Nullable Output<String> kafkaSettings) {
            $.kafkaSettings = kafkaSettings;
            return this;
        }

        /**
         * @param kafkaSettings Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
         * 
         * @return builder
         * 
         */
        public Builder kafkaSettings(String kafkaSettings) {
            return kafkaSettings(Output.of(kafkaSettings));
        }

        /**
         * @param schemaRegistrySettings Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
         * 
         * @return builder
         * 
         */
        public Builder schemaRegistrySettings(@Nullable Output<String> schemaRegistrySettings) {
            $.schemaRegistrySettings = schemaRegistrySettings;
            return this;
        }

        /**
         * @param schemaRegistrySettings Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
         * 
         * @return builder
         * 
         */
        public Builder schemaRegistrySettings(String schemaRegistrySettings) {
            return schemaRegistrySettings(Output.of(schemaRegistrySettings));
        }

        /**
         * @param version PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public DatabaseKafkaArgs build() {
            return $;
        }
    }

}
