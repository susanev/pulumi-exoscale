// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityGroupRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityGroupRuleArgs Empty = new SecurityGroupRuleArgs();

    /**
     * An (`INGRESS`) source / (`EGRESS`) destination IP subnet (in [CIDR notation][cidr]) to match (conflicts with `user_security_group`/`user_security_group_id`).
     * * `start_port`/`end_port` - A `TCP`/`UDP` port range to match.
     * * `icmp_type`/`icmp_code` - An ICMP/ICMPv6 [type/code][icmp] to match.
     * 
     */
    @Import(name="cidr")
    private @Nullable Output<String> cidr;

    /**
     * @return An (`INGRESS`) source / (`EGRESS`) destination IP subnet (in [CIDR notation][cidr]) to match (conflicts with `user_security_group`/`user_security_group_id`).
     * * `start_port`/`end_port` - A `TCP`/`UDP` port range to match.
     * * `icmp_type`/`icmp_code` - An ICMP/ICMPv6 [type/code][icmp] to match.
     * 
     */
    public Optional<Output<String>> cidr() {
        return Optional.ofNullable(this.cidr);
    }

    /**
     * A free-form text describing the security group rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A free-form text describing the security group rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="endPort")
    private @Nullable Output<Integer> endPort;

    public Optional<Output<Integer>> endPort() {
        return Optional.ofNullable(this.endPort);
    }

    @Import(name="icmpCode")
    private @Nullable Output<Integer> icmpCode;

    public Optional<Output<Integer>> icmpCode() {
        return Optional.ofNullable(this.icmpCode);
    }

    @Import(name="icmpType")
    private @Nullable Output<Integer> icmpType;

    public Optional<Output<Integer>> icmpType() {
        return Optional.ofNullable(this.icmpType);
    }

    /**
     * The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`)
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`)
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The parent security group name. Please use the `security_group_id` argument along the exoscale.SecurityGroup data source instead.
     * 
     */
    @Import(name="securityGroup")
    private @Nullable Output<String> securityGroup;

    /**
     * @return The parent security group name. Please use the `security_group_id` argument along the exoscale.SecurityGroup data source instead.
     * 
     */
    public Optional<Output<String>> securityGroup() {
        return Optional.ofNullable(this.securityGroup);
    }

    /**
     * The parent exoscale.SecurityGroup ID.
     * 
     */
    @Import(name="securityGroupId")
    private @Nullable Output<String> securityGroupId;

    /**
     * @return The parent exoscale.SecurityGroup ID.
     * 
     */
    public Optional<Output<String>> securityGroupId() {
        return Optional.ofNullable(this.securityGroupId);
    }

    @Import(name="startPort")
    private @Nullable Output<Integer> startPort;

    public Optional<Output<Integer>> startPort() {
        return Optional.ofNullable(this.startPort);
    }

    /**
     * The traffic direction to match (`INGRESS` or `EGRESS`).
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The traffic direction to match (`INGRESS` or `EGRESS`).
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * An (`INGRESS`) source / (`EGRESS`) destination security group name to match (conflicts with `cidr`/`user_security_group_id`). Please use the `user_security_group_id` argument along the exoscale.SecurityGroup data source instead.
     * 
     */
    @Import(name="userSecurityGroup")
    private @Nullable Output<String> userSecurityGroup;

    /**
     * @return An (`INGRESS`) source / (`EGRESS`) destination security group name to match (conflicts with `cidr`/`user_security_group_id`). Please use the `user_security_group_id` argument along the exoscale.SecurityGroup data source instead.
     * 
     */
    public Optional<Output<String>> userSecurityGroup() {
        return Optional.ofNullable(this.userSecurityGroup);
    }

    /**
     * An (`INGRESS`) source / (`EGRESS`) destination security group ID to match (conflicts with `cidr`/`user_security_group)`).
     * 
     */
    @Import(name="userSecurityGroupId")
    private @Nullable Output<String> userSecurityGroupId;

    /**
     * @return An (`INGRESS`) source / (`EGRESS`) destination security group ID to match (conflicts with `cidr`/`user_security_group)`).
     * 
     */
    public Optional<Output<String>> userSecurityGroupId() {
        return Optional.ofNullable(this.userSecurityGroupId);
    }

    private SecurityGroupRuleArgs() {}

    private SecurityGroupRuleArgs(SecurityGroupRuleArgs $) {
        this.cidr = $.cidr;
        this.description = $.description;
        this.endPort = $.endPort;
        this.icmpCode = $.icmpCode;
        this.icmpType = $.icmpType;
        this.protocol = $.protocol;
        this.securityGroup = $.securityGroup;
        this.securityGroupId = $.securityGroupId;
        this.startPort = $.startPort;
        this.type = $.type;
        this.userSecurityGroup = $.userSecurityGroup;
        this.userSecurityGroupId = $.userSecurityGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityGroupRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityGroupRuleArgs $;

        public Builder() {
            $ = new SecurityGroupRuleArgs();
        }

        public Builder(SecurityGroupRuleArgs defaults) {
            $ = new SecurityGroupRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidr An (`INGRESS`) source / (`EGRESS`) destination IP subnet (in [CIDR notation][cidr]) to match (conflicts with `user_security_group`/`user_security_group_id`).
         * * `start_port`/`end_port` - A `TCP`/`UDP` port range to match.
         * * `icmp_type`/`icmp_code` - An ICMP/ICMPv6 [type/code][icmp] to match.
         * 
         * @return builder
         * 
         */
        public Builder cidr(@Nullable Output<String> cidr) {
            $.cidr = cidr;
            return this;
        }

        /**
         * @param cidr An (`INGRESS`) source / (`EGRESS`) destination IP subnet (in [CIDR notation][cidr]) to match (conflicts with `user_security_group`/`user_security_group_id`).
         * * `start_port`/`end_port` - A `TCP`/`UDP` port range to match.
         * * `icmp_type`/`icmp_code` - An ICMP/ICMPv6 [type/code][icmp] to match.
         * 
         * @return builder
         * 
         */
        public Builder cidr(String cidr) {
            return cidr(Output.of(cidr));
        }

        /**
         * @param description A free-form text describing the security group rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A free-form text describing the security group rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder endPort(@Nullable Output<Integer> endPort) {
            $.endPort = endPort;
            return this;
        }

        public Builder endPort(Integer endPort) {
            return endPort(Output.of(endPort));
        }

        public Builder icmpCode(@Nullable Output<Integer> icmpCode) {
            $.icmpCode = icmpCode;
            return this;
        }

        public Builder icmpCode(Integer icmpCode) {
            return icmpCode(Output.of(icmpCode));
        }

        public Builder icmpType(@Nullable Output<Integer> icmpType) {
            $.icmpType = icmpType;
            return this;
        }

        public Builder icmpType(Integer icmpType) {
            return icmpType(Output.of(icmpType));
        }

        /**
         * @param protocol The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`)
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`)
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param securityGroup The parent security group name. Please use the `security_group_id` argument along the exoscale.SecurityGroup data source instead.
         * 
         * @return builder
         * 
         */
        public Builder securityGroup(@Nullable Output<String> securityGroup) {
            $.securityGroup = securityGroup;
            return this;
        }

        /**
         * @param securityGroup The parent security group name. Please use the `security_group_id` argument along the exoscale.SecurityGroup data source instead.
         * 
         * @return builder
         * 
         */
        public Builder securityGroup(String securityGroup) {
            return securityGroup(Output.of(securityGroup));
        }

        /**
         * @param securityGroupId The parent exoscale.SecurityGroup ID.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(@Nullable Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        /**
         * @param securityGroupId The parent exoscale.SecurityGroup ID.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        public Builder startPort(@Nullable Output<Integer> startPort) {
            $.startPort = startPort;
            return this;
        }

        public Builder startPort(Integer startPort) {
            return startPort(Output.of(startPort));
        }

        /**
         * @param type The traffic direction to match (`INGRESS` or `EGRESS`).
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The traffic direction to match (`INGRESS` or `EGRESS`).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param userSecurityGroup An (`INGRESS`) source / (`EGRESS`) destination security group name to match (conflicts with `cidr`/`user_security_group_id`). Please use the `user_security_group_id` argument along the exoscale.SecurityGroup data source instead.
         * 
         * @return builder
         * 
         */
        public Builder userSecurityGroup(@Nullable Output<String> userSecurityGroup) {
            $.userSecurityGroup = userSecurityGroup;
            return this;
        }

        /**
         * @param userSecurityGroup An (`INGRESS`) source / (`EGRESS`) destination security group name to match (conflicts with `cidr`/`user_security_group_id`). Please use the `user_security_group_id` argument along the exoscale.SecurityGroup data source instead.
         * 
         * @return builder
         * 
         */
        public Builder userSecurityGroup(String userSecurityGroup) {
            return userSecurityGroup(Output.of(userSecurityGroup));
        }

        /**
         * @param userSecurityGroupId An (`INGRESS`) source / (`EGRESS`) destination security group ID to match (conflicts with `cidr`/`user_security_group)`).
         * 
         * @return builder
         * 
         */
        public Builder userSecurityGroupId(@Nullable Output<String> userSecurityGroupId) {
            $.userSecurityGroupId = userSecurityGroupId;
            return this;
        }

        /**
         * @param userSecurityGroupId An (`INGRESS`) source / (`EGRESS`) destination security group ID to match (conflicts with `cidr`/`user_security_group)`).
         * 
         * @return builder
         * 
         */
        public Builder userSecurityGroupId(String userSecurityGroupId) {
            return userSecurityGroupId(Output.of(userSecurityGroupId));
        }

        public SecurityGroupRuleArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
