// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetComputeIPAddressArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetComputeIPAddressArgs Empty = new GetComputeIPAddressArgs();

    /**
     * The EIP description to match.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The EIP description to match.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The Elastic IP (EIP) ID to match.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The Elastic IP (EIP) ID to match.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The EIP IPv4 address to match.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The EIP IPv4 address to match.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The EIP tags to match.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The EIP tags to match.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The Exoscale Zone name.
     * 
     */
    @Import(name="zone", required=true)
    private Output<String> zone;

    /**
     * @return The Exoscale Zone name.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    private GetComputeIPAddressArgs() {}

    private GetComputeIPAddressArgs(GetComputeIPAddressArgs $) {
        this.description = $.description;
        this.id = $.id;
        this.ipAddress = $.ipAddress;
        this.tags = $.tags;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetComputeIPAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetComputeIPAddressArgs $;

        public Builder() {
            $ = new GetComputeIPAddressArgs();
        }

        public Builder(GetComputeIPAddressArgs defaults) {
            $ = new GetComputeIPAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The EIP description to match.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The EIP description to match.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param id The Elastic IP (EIP) ID to match.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The Elastic IP (EIP) ID to match.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param ipAddress The EIP IPv4 address to match.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The EIP IPv4 address to match.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param tags The EIP tags to match.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The EIP tags to match.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param zone The Exoscale Zone name.
         * 
         * @return builder
         * 
         */
        public Builder zone(Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The Exoscale Zone name.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public GetComputeIPAddressArgs build() {
            $.zone = Objects.requireNonNull($.zone, "expected parameter 'zone' to be non-null");
            return $;
        }
    }

}
