// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainRecordArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainRecordArgs Empty = new DomainRecordArgs();

    /**
     * The record value.
     * 
     */
    @Import(name="content", required=true)
    private Output<String> content;

    /**
     * @return The record value.
     * 
     */
    public Output<String> content() {
        return this.content;
    }

    /**
     * The parent exoscale.Domain to attach the record to.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return The parent exoscale.Domain to attach the record to.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * The record name, Leave blank (`&#34;&#34;`) to create a root record (similar to using `@` in a DNS zone file).
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The record name, Leave blank (`&#34;&#34;`) to create a root record (similar to using `@` in a DNS zone file).
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The record priority (for types that support it; minimum `0`).
     * 
     */
    @Import(name="prio")
    private @Nullable Output<Integer> prio;

    /**
     * @return The record priority (for types that support it; minimum `0`).
     * 
     */
    public Optional<Output<Integer>> prio() {
        return Optional.ofNullable(this.prio);
    }

    /**
     * The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
     * 
     */
    @Import(name="recordType", required=true)
    private Output<String> recordType;

    /**
     * @return The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
     * 
     */
    public Output<String> recordType() {
        return this.recordType;
    }

    /**
     * The record TTL (seconds; minimum `0`; default: `3600`).
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return The record TTL (seconds; minimum `0`; default: `3600`).
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private DomainRecordArgs() {}

    private DomainRecordArgs(DomainRecordArgs $) {
        this.content = $.content;
        this.domain = $.domain;
        this.name = $.name;
        this.prio = $.prio;
        this.recordType = $.recordType;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainRecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainRecordArgs $;

        public Builder() {
            $ = new DomainRecordArgs();
        }

        public Builder(DomainRecordArgs defaults) {
            $ = new DomainRecordArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param content The record value.
         * 
         * @return builder
         * 
         */
        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The record value.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param domain The parent exoscale.Domain to attach the record to.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The parent exoscale.Domain to attach the record to.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param name The record name, Leave blank (`&#34;&#34;`) to create a root record (similar to using `@` in a DNS zone file).
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The record name, Leave blank (`&#34;&#34;`) to create a root record (similar to using `@` in a DNS zone file).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param prio The record priority (for types that support it; minimum `0`).
         * 
         * @return builder
         * 
         */
        public Builder prio(@Nullable Output<Integer> prio) {
            $.prio = prio;
            return this;
        }

        /**
         * @param prio The record priority (for types that support it; minimum `0`).
         * 
         * @return builder
         * 
         */
        public Builder prio(Integer prio) {
            return prio(Output.of(prio));
        }

        /**
         * @param recordType The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
         * 
         * @return builder
         * 
         */
        public Builder recordType(Output<String> recordType) {
            $.recordType = recordType;
            return this;
        }

        /**
         * @param recordType The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
         * 
         * @return builder
         * 
         */
        public Builder recordType(String recordType) {
            return recordType(Output.of(recordType));
        }

        /**
         * @param ttl The record TTL (seconds; minimum `0`; default: `3600`).
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The record TTL (seconds; minimum `0`; default: `3600`).
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        public DomainRecordArgs build() {
            $.content = Objects.requireNonNull($.content, "expected parameter 'content' to be non-null");
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.recordType = Objects.requireNonNull($.recordType, "expected parameter 'recordType' to be non-null");
            return $;
        }
    }

}
