// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetComputeResult {
    /**
     * @return The compute instance number of CPUs.
     * 
     */
    private Integer cpu;
    /**
     * @return The instance creation date.
     * 
     */
    private String created;
    /**
     * @return The instance disk size (GiB).
     * 
     */
    private Integer diskSize;
    private @Nullable String hostname;
    private @Nullable String id;
    /**
     * @return The instance (main network interface) IPv6 address (if enabled).
     * 
     */
    private String ip6Address;
    /**
     * @return The instance (main network interface) IPv4 address.
     * 
     */
    private String ipAddress;
    /**
     * @return The instance allocated memory.
     * 
     */
    private Integer memory;
    /**
     * @return List of compute private IPv4 addresses (in *managed* private networks only).
     * 
     */
    private List<String> privateNetworkIpAddresses;
    /**
     * @return The instance size.
     * 
     */
    private String size;
    /**
     * @return The current instance state.
     * 
     */
    private String state;
    private @Nullable Map<String,String> tags;
    /**
     * @return The instance template.
     * 
     */
    private String template;
    /**
     * @return Exoscale Zone name.
     * 
     */
    private String zone;

    private GetComputeResult() {}
    /**
     * @return The compute instance number of CPUs.
     * 
     */
    public Integer cpu() {
        return this.cpu;
    }
    /**
     * @return The instance creation date.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return The instance disk size (GiB).
     * 
     */
    public Integer diskSize() {
        return this.diskSize;
    }
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The instance (main network interface) IPv6 address (if enabled).
     * 
     */
    public String ip6Address() {
        return this.ip6Address;
    }
    /**
     * @return The instance (main network interface) IPv4 address.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return The instance allocated memory.
     * 
     */
    public Integer memory() {
        return this.memory;
    }
    /**
     * @return List of compute private IPv4 addresses (in *managed* private networks only).
     * 
     */
    public List<String> privateNetworkIpAddresses() {
        return this.privateNetworkIpAddresses;
    }
    /**
     * @return The instance size.
     * 
     */
    public String size() {
        return this.size;
    }
    /**
     * @return The current instance state.
     * 
     */
    public String state() {
        return this.state;
    }
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The instance template.
     * 
     */
    public String template() {
        return this.template;
    }
    /**
     * @return Exoscale Zone name.
     * 
     */
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetComputeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer cpu;
        private String created;
        private Integer diskSize;
        private @Nullable String hostname;
        private @Nullable String id;
        private String ip6Address;
        private String ipAddress;
        private Integer memory;
        private List<String> privateNetworkIpAddresses;
        private String size;
        private String state;
        private @Nullable Map<String,String> tags;
        private String template;
        private String zone;
        public Builder() {}
        public Builder(GetComputeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cpu = defaults.cpu;
    	      this.created = defaults.created;
    	      this.diskSize = defaults.diskSize;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.ip6Address = defaults.ip6Address;
    	      this.ipAddress = defaults.ipAddress;
    	      this.memory = defaults.memory;
    	      this.privateNetworkIpAddresses = defaults.privateNetworkIpAddresses;
    	      this.size = defaults.size;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
    	      this.template = defaults.template;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder cpu(Integer cpu) {
            this.cpu = Objects.requireNonNull(cpu);
            return this;
        }
        @CustomType.Setter
        public Builder created(String created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        @CustomType.Setter
        public Builder diskSize(Integer diskSize) {
            this.diskSize = Objects.requireNonNull(diskSize);
            return this;
        }
        @CustomType.Setter
        public Builder hostname(@Nullable String hostname) {
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ip6Address(String ip6Address) {
            this.ip6Address = Objects.requireNonNull(ip6Address);
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        @CustomType.Setter
        public Builder memory(Integer memory) {
            this.memory = Objects.requireNonNull(memory);
            return this;
        }
        @CustomType.Setter
        public Builder privateNetworkIpAddresses(List<String> privateNetworkIpAddresses) {
            this.privateNetworkIpAddresses = Objects.requireNonNull(privateNetworkIpAddresses);
            return this;
        }
        public Builder privateNetworkIpAddresses(String... privateNetworkIpAddresses) {
            return privateNetworkIpAddresses(List.of(privateNetworkIpAddresses));
        }
        @CustomType.Setter
        public Builder size(String size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder template(String template) {
            this.template = Objects.requireNonNull(template);
            return this;
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }
        public GetComputeResult build() {
            final var o = new GetComputeResult();
            o.cpu = cpu;
            o.created = created;
            o.diskSize = diskSize;
            o.hostname = hostname;
            o.id = id;
            o.ip6Address = ip6Address;
            o.ipAddress = ipAddress;
            o.memory = memory;
            o.privateNetworkIpAddresses = privateNetworkIpAddresses;
            o.size = size;
            o.state = state;
            o.tags = tags;
            o.template = template;
            o.zone = zone;
            return o;
        }
    }
}
