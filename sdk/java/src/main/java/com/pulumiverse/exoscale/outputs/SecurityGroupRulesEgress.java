// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecurityGroupRulesEgress {
    /**
     * @return A list of (`INGRESS`) source / (`EGRESS`) destination IP subnet (in CIDR notation) to match.
     * 
     */
    private @Nullable List<String> cidrLists;
    /**
     * @return A free-form text describing the block.
     * * `icmp_type`/`icmp_code` - An ICMP/ICMPv6 type/code to match.
     * 
     */
    private @Nullable String description;
    private @Nullable Integer icmpCode;
    private @Nullable Integer icmpType;
    private @Nullable List<String> ids;
    /**
     * @return A list of ports or port ranges (`&lt;start_port&gt;-&lt;end_port&gt;`).
     * 
     */
    private @Nullable List<String> ports;
    /**
     * @return The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`).
     * 
     */
    private @Nullable String protocol;
    /**
     * @return A list of source (for ingress)/destination (for egress) identified by a security group.
     * 
     */
    private @Nullable List<String> userSecurityGroupLists;

    private SecurityGroupRulesEgress() {}
    /**
     * @return A list of (`INGRESS`) source / (`EGRESS`) destination IP subnet (in CIDR notation) to match.
     * 
     */
    public List<String> cidrLists() {
        return this.cidrLists == null ? List.of() : this.cidrLists;
    }
    /**
     * @return A free-form text describing the block.
     * * `icmp_type`/`icmp_code` - An ICMP/ICMPv6 type/code to match.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<Integer> icmpCode() {
        return Optional.ofNullable(this.icmpCode);
    }
    public Optional<Integer> icmpType() {
        return Optional.ofNullable(this.icmpType);
    }
    public List<String> ids() {
        return this.ids == null ? List.of() : this.ids;
    }
    /**
     * @return A list of ports or port ranges (`&lt;start_port&gt;-&lt;end_port&gt;`).
     * 
     */
    public List<String> ports() {
        return this.ports == null ? List.of() : this.ports;
    }
    /**
     * @return The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`).
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return A list of source (for ingress)/destination (for egress) identified by a security group.
     * 
     */
    public List<String> userSecurityGroupLists() {
        return this.userSecurityGroupLists == null ? List.of() : this.userSecurityGroupLists;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityGroupRulesEgress defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> cidrLists;
        private @Nullable String description;
        private @Nullable Integer icmpCode;
        private @Nullable Integer icmpType;
        private @Nullable List<String> ids;
        private @Nullable List<String> ports;
        private @Nullable String protocol;
        private @Nullable List<String> userSecurityGroupLists;
        public Builder() {}
        public Builder(SecurityGroupRulesEgress defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cidrLists = defaults.cidrLists;
    	      this.description = defaults.description;
    	      this.icmpCode = defaults.icmpCode;
    	      this.icmpType = defaults.icmpType;
    	      this.ids = defaults.ids;
    	      this.ports = defaults.ports;
    	      this.protocol = defaults.protocol;
    	      this.userSecurityGroupLists = defaults.userSecurityGroupLists;
        }

        @CustomType.Setter
        public Builder cidrLists(@Nullable List<String> cidrLists) {
            this.cidrLists = cidrLists;
            return this;
        }
        public Builder cidrLists(String... cidrLists) {
            return cidrLists(List.of(cidrLists));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder icmpCode(@Nullable Integer icmpCode) {
            this.icmpCode = icmpCode;
            return this;
        }
        @CustomType.Setter
        public Builder icmpType(@Nullable Integer icmpType) {
            this.icmpType = icmpType;
            return this;
        }
        @CustomType.Setter
        public Builder ids(@Nullable List<String> ids) {
            this.ids = ids;
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        @CustomType.Setter
        public Builder ports(@Nullable List<String> ports) {
            this.ports = ports;
            return this;
        }
        public Builder ports(String... ports) {
            return ports(List.of(ports));
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder userSecurityGroupLists(@Nullable List<String> userSecurityGroupLists) {
            this.userSecurityGroupLists = userSecurityGroupLists;
            return this;
        }
        public Builder userSecurityGroupLists(String... userSecurityGroupLists) {
            return userSecurityGroupLists(List.of(userSecurityGroupLists));
        }
        public SecurityGroupRulesEgress build() {
            final var o = new SecurityGroupRulesEgress();
            o.cidrLists = cidrLists;
            o.description = description;
            o.icmpCode = icmpCode;
            o.icmpType = icmpType;
            o.ids = ids;
            o.ports = ports;
            o.protocol = protocol;
            o.userSecurityGroupLists = userSecurityGroupLists;
            return o;
        }
    }
}
