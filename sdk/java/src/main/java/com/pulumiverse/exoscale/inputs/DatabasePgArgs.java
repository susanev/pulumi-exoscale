// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabasePgArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabasePgArgs Empty = new DatabasePgArgs();

    /**
     * A custom administrator account password (may only be set at creation time).
     * 
     */
    @Import(name="adminPassword")
    private @Nullable Output<String> adminPassword;

    /**
     * @return A custom administrator account password (may only be set at creation time).
     * 
     */
    public Optional<Output<String>> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }

    /**
     * A custom administrator account username (may only be set at creation time).
     * 
     */
    @Import(name="adminUsername")
    private @Nullable Output<String> adminUsername;

    /**
     * @return A custom administrator account username (may only be set at creation time).
     * 
     */
    public Optional<Output<String>> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }

    /**
     * The automated backup schedule (`HH:MM`).
     * 
     */
    @Import(name="backupSchedule")
    private @Nullable Output<String> backupSchedule;

    /**
     * @return The automated backup schedule (`HH:MM`).
     * 
     */
    public Optional<Output<String>> backupSchedule() {
        return Optional.ofNullable(this.backupSchedule);
    }

    /**
     * A list of CIDR blocks to allow incoming connections from.
     * 
     */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return A list of CIDR blocks to allow incoming connections from.
     * 
     */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
     * 
     */
    @Import(name="pgSettings")
    private @Nullable Output<String> pgSettings;

    /**
     * @return PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
     * 
     */
    public Optional<Output<String>> pgSettings() {
        return Optional.ofNullable(this.pgSettings);
    }

    /**
     * PgBouncer configuration settings in JSON format (`exo dbaas type show pg --settings=pgbouncer` for reference).
     * 
     */
    @Import(name="pgbouncerSettings")
    private @Nullable Output<String> pgbouncerSettings;

    /**
     * @return PgBouncer configuration settings in JSON format (`exo dbaas type show pg --settings=pgbouncer` for reference).
     * 
     */
    public Optional<Output<String>> pgbouncerSettings() {
        return Optional.ofNullable(this.pgbouncerSettings);
    }

    /**
     * pglookout configuration settings in JSON format (`exo dbaas type show pg --settings=pglookout` for reference).
     * 
     */
    @Import(name="pglookoutSettings")
    private @Nullable Output<String> pglookoutSettings;

    /**
     * @return pglookout configuration settings in JSON format (`exo dbaas type show pg --settings=pglookout` for reference).
     * 
     */
    public Optional<Output<String>> pglookoutSettings() {
        return Optional.ofNullable(this.pglookoutSettings);
    }

    /**
     * PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private DatabasePgArgs() {}

    private DatabasePgArgs(DatabasePgArgs $) {
        this.adminPassword = $.adminPassword;
        this.adminUsername = $.adminUsername;
        this.backupSchedule = $.backupSchedule;
        this.ipFilters = $.ipFilters;
        this.pgSettings = $.pgSettings;
        this.pgbouncerSettings = $.pgbouncerSettings;
        this.pglookoutSettings = $.pglookoutSettings;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabasePgArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabasePgArgs $;

        public Builder() {
            $ = new DatabasePgArgs();
        }

        public Builder(DatabasePgArgs defaults) {
            $ = new DatabasePgArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminPassword A custom administrator account password (may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(@Nullable Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        /**
         * @param adminPassword A custom administrator account password (may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        /**
         * @param adminUsername A custom administrator account username (may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(@Nullable Output<String> adminUsername) {
            $.adminUsername = adminUsername;
            return this;
        }

        /**
         * @param adminUsername A custom administrator account username (may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(String adminUsername) {
            return adminUsername(Output.of(adminUsername));
        }

        /**
         * @param backupSchedule The automated backup schedule (`HH:MM`).
         * 
         * @return builder
         * 
         */
        public Builder backupSchedule(@Nullable Output<String> backupSchedule) {
            $.backupSchedule = backupSchedule;
            return this;
        }

        /**
         * @param backupSchedule The automated backup schedule (`HH:MM`).
         * 
         * @return builder
         * 
         */
        public Builder backupSchedule(String backupSchedule) {
            return backupSchedule(Output.of(backupSchedule));
        }

        /**
         * @param ipFilters A list of CIDR blocks to allow incoming connections from.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters A list of CIDR blocks to allow incoming connections from.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters A list of CIDR blocks to allow incoming connections from.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param pgSettings PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
         * 
         * @return builder
         * 
         */
        public Builder pgSettings(@Nullable Output<String> pgSettings) {
            $.pgSettings = pgSettings;
            return this;
        }

        /**
         * @param pgSettings PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
         * 
         * @return builder
         * 
         */
        public Builder pgSettings(String pgSettings) {
            return pgSettings(Output.of(pgSettings));
        }

        /**
         * @param pgbouncerSettings PgBouncer configuration settings in JSON format (`exo dbaas type show pg --settings=pgbouncer` for reference).
         * 
         * @return builder
         * 
         */
        public Builder pgbouncerSettings(@Nullable Output<String> pgbouncerSettings) {
            $.pgbouncerSettings = pgbouncerSettings;
            return this;
        }

        /**
         * @param pgbouncerSettings PgBouncer configuration settings in JSON format (`exo dbaas type show pg --settings=pgbouncer` for reference).
         * 
         * @return builder
         * 
         */
        public Builder pgbouncerSettings(String pgbouncerSettings) {
            return pgbouncerSettings(Output.of(pgbouncerSettings));
        }

        /**
         * @param pglookoutSettings pglookout configuration settings in JSON format (`exo dbaas type show pg --settings=pglookout` for reference).
         * 
         * @return builder
         * 
         */
        public Builder pglookoutSettings(@Nullable Output<String> pglookoutSettings) {
            $.pglookoutSettings = pglookoutSettings;
            return this;
        }

        /**
         * @param pglookoutSettings pglookout configuration settings in JSON format (`exo dbaas type show pg --settings=pglookout` for reference).
         * 
         * @return builder
         * 
         */
        public Builder pglookoutSettings(String pglookoutSettings) {
            return pglookoutSettings(Output.of(pglookoutSettings));
        }

        /**
         * @param version PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public DatabasePgArgs build() {
            return $;
        }
    }

}
