// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDomainRecordFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetDomainRecordFilterArgs Empty = new GetDomainRecordFilterArgs();

    /**
     * A regular expression to match the record content.
     * 
     */
    @Import(name="contentRegex")
    private @Nullable Output<String> contentRegex;

    /**
     * @return A regular expression to match the record content.
     * 
     */
    public Optional<Output<String>> contentRegex() {
        return Optional.ofNullable(this.contentRegex);
    }

    /**
     * The record ID to match.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The record ID to match.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The domain record name to match.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The domain record name to match.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The record type to match.
     * 
     */
    @Import(name="recordType")
    private @Nullable Output<String> recordType;

    /**
     * @return The record type to match.
     * 
     */
    public Optional<Output<String>> recordType() {
        return Optional.ofNullable(this.recordType);
    }

    private GetDomainRecordFilterArgs() {}

    private GetDomainRecordFilterArgs(GetDomainRecordFilterArgs $) {
        this.contentRegex = $.contentRegex;
        this.id = $.id;
        this.name = $.name;
        this.recordType = $.recordType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDomainRecordFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDomainRecordFilterArgs $;

        public Builder() {
            $ = new GetDomainRecordFilterArgs();
        }

        public Builder(GetDomainRecordFilterArgs defaults) {
            $ = new GetDomainRecordFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentRegex A regular expression to match the record content.
         * 
         * @return builder
         * 
         */
        public Builder contentRegex(@Nullable Output<String> contentRegex) {
            $.contentRegex = contentRegex;
            return this;
        }

        /**
         * @param contentRegex A regular expression to match the record content.
         * 
         * @return builder
         * 
         */
        public Builder contentRegex(String contentRegex) {
            return contentRegex(Output.of(contentRegex));
        }

        /**
         * @param id The record ID to match.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The record ID to match.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name The domain record name to match.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The domain record name to match.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param recordType The record type to match.
         * 
         * @return builder
         * 
         */
        public Builder recordType(@Nullable Output<String> recordType) {
            $.recordType = recordType;
            return this;
        }

        /**
         * @param recordType The record type to match.
         * 
         * @return builder
         * 
         */
        public Builder recordType(String recordType) {
            return recordType(Output.of(recordType));
        }

        public GetDomainRecordFilterArgs build() {
            return $;
        }
    }

}
