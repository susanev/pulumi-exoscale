// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumiverse.exoscale.inputs.ComputeInstanceNetworkInterfaceArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ComputeInstanceState extends com.pulumi.resources.ResourceArgs {

    public static final ComputeInstanceState Empty = new ComputeInstanceState();

    /**
     * A list of exoscale.AntiAffinityGroup (IDs) to attach to the instance (may only be set at creation time).
     * 
     */
    @Import(name="antiAffinityGroupIds")
    private @Nullable Output<List<String>> antiAffinityGroupIds;

    /**
     * @return A list of exoscale.AntiAffinityGroup (IDs) to attach to the instance (may only be set at creation time).
     * 
     */
    public Optional<Output<List<String>>> antiAffinityGroupIds() {
        return Optional.ofNullable(this.antiAffinityGroupIds);
    }

    /**
     * The instance creation date.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The instance creation date.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * A deploy target ID.
     * 
     */
    @Import(name="deployTargetId")
    private @Nullable Output<String> deployTargetId;

    /**
     * @return A deploy target ID.
     * 
     */
    public Optional<Output<String>> deployTargetId() {
        return Optional.ofNullable(this.deployTargetId);
    }

    /**
     * The instance disk size (GiB; at least `10`). **WARNING**: updating this attribute stops/restarts the instance.
     * 
     */
    @Import(name="diskSize")
    private @Nullable Output<Integer> diskSize;

    /**
     * @return The instance disk size (GiB; at least `10`). **WARNING**: updating this attribute stops/restarts the instance.
     * 
     */
    public Optional<Output<Integer>> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }

    /**
     * A list of exoscale.ElasticIP (IDs) to attach to the instance.
     * 
     */
    @Import(name="elasticIpIds")
    private @Nullable Output<List<String>> elasticIpIds;

    /**
     * @return A list of exoscale.ElasticIP (IDs) to attach to the instance.
     * 
     */
    public Optional<Output<List<String>>> elasticIpIds() {
        return Optional.ofNullable(this.elasticIpIds);
    }

    /**
     * Enable IPv6 on the instance (boolean; default: `false`).
     * 
     */
    @Import(name="ipv6")
    private @Nullable Output<Boolean> ipv6;

    /**
     * @return Enable IPv6 on the instance (boolean; default: `false`).
     * 
     */
    public Optional<Output<Boolean>> ipv6() {
        return Optional.ofNullable(this.ipv6);
    }

    /**
     * The instance (main network interface) IPv6 address (if enabled).
     * 
     */
    @Import(name="ipv6Address")
    private @Nullable Output<String> ipv6Address;

    /**
     * @return The instance (main network interface) IPv6 address (if enabled).
     * 
     */
    public Optional<Output<String>> ipv6Address() {
        return Optional.ofNullable(this.ipv6Address);
    }

    /**
     * A map of key/value labels.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return A map of key/value labels.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The compute instance name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The compute instance name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Private network interfaces (may be specified multiple times). Structure is documented below.
     * 
     */
    @Import(name="networkInterfaces")
    private @Nullable Output<List<ComputeInstanceNetworkInterfaceArgs>> networkInterfaces;

    /**
     * @return Private network interfaces (may be specified multiple times). Structure is documented below.
     * 
     */
    public Optional<Output<List<ComputeInstanceNetworkInterfaceArgs>>> networkInterfaces() {
        return Optional.ofNullable(this.networkInterfaces);
    }

    /**
     * (Deprecated) A list of private networks (IDs) attached to the instance. Please use the `network_interface.*.network_id` argument instead.
     * 
     * @deprecated
     * Use the network_interface block instead.
     * 
     */
    @Deprecated /* Use the network_interface block instead. */
    @Import(name="privateNetworkIds")
    private @Nullable Output<List<String>> privateNetworkIds;

    /**
     * @return (Deprecated) A list of private networks (IDs) attached to the instance. Please use the `network_interface.*.network_id` argument instead.
     * 
     * @deprecated
     * Use the network_interface block instead.
     * 
     */
    @Deprecated /* Use the network_interface block instead. */
    public Optional<Output<List<String>>> privateNetworkIds() {
        return Optional.ofNullable(this.privateNetworkIds);
    }

    /**
     * The instance (main network interface) IPv4 address.
     * 
     */
    @Import(name="publicIpAddress")
    private @Nullable Output<String> publicIpAddress;

    /**
     * @return The instance (main network interface) IPv4 address.
     * 
     */
    public Optional<Output<String>> publicIpAddress() {
        return Optional.ofNullable(this.publicIpAddress);
    }

    /**
     * A list of exoscale.SecurityGroup (IDs) to attach to the instance.
     * 
     */
    @Import(name="securityGroupIds")
    private @Nullable Output<List<String>> securityGroupIds;

    /**
     * @return A list of exoscale.SecurityGroup (IDs) to attach to the instance.
     * 
     */
    public Optional<Output<List<String>>> securityGroupIds() {
        return Optional.ofNullable(this.securityGroupIds);
    }

    /**
     * The exoscale.SSHKey (name) to authorize in the instance (may only be set at creation time).
     * 
     */
    @Import(name="sshKey")
    private @Nullable Output<String> sshKey;

    /**
     * @return The exoscale.SSHKey (name) to authorize in the instance (may only be set at creation time).
     * 
     */
    public Optional<Output<String>> sshKey() {
        return Optional.ofNullable(this.sshKey);
    }

    /**
     * The instance state (`running` or `stopped`; default: `running`).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The instance state (`running` or `stopped`; default: `running`).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The exoscale.getComputeTemplate (ID) to use when creating the instance.
     * 
     */
    @Import(name="templateId")
    private @Nullable Output<String> templateId;

    /**
     * @return The exoscale.getComputeTemplate (ID) to use when creating the instance.
     * 
     */
    public Optional<Output<String>> templateId() {
        return Optional.ofNullable(this.templateId);
    }

    /**
     * The instance type (`&lt;family&gt;.&lt;size&gt;`, e.g. `standard.medium`; use the [Exoscale CLI][cli] - `exo compute instance-type list` - for the list of available types). **WARNING**: updating this attribute stops/restarts the instance.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The instance type (`&lt;family&gt;.&lt;size&gt;`, e.g. `standard.medium`; use the [Exoscale CLI][cli] - `exo compute instance-type list` - for the list of available types). **WARNING**: updating this attribute stops/restarts the instance.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * [cloud-init][cloud-init] configuration (no need to base64-encode or gzip it as the provider will take care of it).
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    /**
     * @return [cloud-init][cloud-init] configuration (no need to base64-encode or gzip it as the provider will take care of it).
     * 
     */
    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    /**
     * The Exoscale [Zone][zone] name.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The Exoscale [Zone][zone] name.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private ComputeInstanceState() {}

    private ComputeInstanceState(ComputeInstanceState $) {
        this.antiAffinityGroupIds = $.antiAffinityGroupIds;
        this.createdAt = $.createdAt;
        this.deployTargetId = $.deployTargetId;
        this.diskSize = $.diskSize;
        this.elasticIpIds = $.elasticIpIds;
        this.ipv6 = $.ipv6;
        this.ipv6Address = $.ipv6Address;
        this.labels = $.labels;
        this.name = $.name;
        this.networkInterfaces = $.networkInterfaces;
        this.privateNetworkIds = $.privateNetworkIds;
        this.publicIpAddress = $.publicIpAddress;
        this.securityGroupIds = $.securityGroupIds;
        this.sshKey = $.sshKey;
        this.state = $.state;
        this.templateId = $.templateId;
        this.type = $.type;
        this.userData = $.userData;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComputeInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComputeInstanceState $;

        public Builder() {
            $ = new ComputeInstanceState();
        }

        public Builder(ComputeInstanceState defaults) {
            $ = new ComputeInstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param antiAffinityGroupIds A list of exoscale.AntiAffinityGroup (IDs) to attach to the instance (may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder antiAffinityGroupIds(@Nullable Output<List<String>> antiAffinityGroupIds) {
            $.antiAffinityGroupIds = antiAffinityGroupIds;
            return this;
        }

        /**
         * @param antiAffinityGroupIds A list of exoscale.AntiAffinityGroup (IDs) to attach to the instance (may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder antiAffinityGroupIds(List<String> antiAffinityGroupIds) {
            return antiAffinityGroupIds(Output.of(antiAffinityGroupIds));
        }

        /**
         * @param antiAffinityGroupIds A list of exoscale.AntiAffinityGroup (IDs) to attach to the instance (may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder antiAffinityGroupIds(String... antiAffinityGroupIds) {
            return antiAffinityGroupIds(List.of(antiAffinityGroupIds));
        }

        /**
         * @param createdAt The instance creation date.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The instance creation date.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param deployTargetId A deploy target ID.
         * 
         * @return builder
         * 
         */
        public Builder deployTargetId(@Nullable Output<String> deployTargetId) {
            $.deployTargetId = deployTargetId;
            return this;
        }

        /**
         * @param deployTargetId A deploy target ID.
         * 
         * @return builder
         * 
         */
        public Builder deployTargetId(String deployTargetId) {
            return deployTargetId(Output.of(deployTargetId));
        }

        /**
         * @param diskSize The instance disk size (GiB; at least `10`). **WARNING**: updating this attribute stops/restarts the instance.
         * 
         * @return builder
         * 
         */
        public Builder diskSize(@Nullable Output<Integer> diskSize) {
            $.diskSize = diskSize;
            return this;
        }

        /**
         * @param diskSize The instance disk size (GiB; at least `10`). **WARNING**: updating this attribute stops/restarts the instance.
         * 
         * @return builder
         * 
         */
        public Builder diskSize(Integer diskSize) {
            return diskSize(Output.of(diskSize));
        }

        /**
         * @param elasticIpIds A list of exoscale.ElasticIP (IDs) to attach to the instance.
         * 
         * @return builder
         * 
         */
        public Builder elasticIpIds(@Nullable Output<List<String>> elasticIpIds) {
            $.elasticIpIds = elasticIpIds;
            return this;
        }

        /**
         * @param elasticIpIds A list of exoscale.ElasticIP (IDs) to attach to the instance.
         * 
         * @return builder
         * 
         */
        public Builder elasticIpIds(List<String> elasticIpIds) {
            return elasticIpIds(Output.of(elasticIpIds));
        }

        /**
         * @param elasticIpIds A list of exoscale.ElasticIP (IDs) to attach to the instance.
         * 
         * @return builder
         * 
         */
        public Builder elasticIpIds(String... elasticIpIds) {
            return elasticIpIds(List.of(elasticIpIds));
        }

        /**
         * @param ipv6 Enable IPv6 on the instance (boolean; default: `false`).
         * 
         * @return builder
         * 
         */
        public Builder ipv6(@Nullable Output<Boolean> ipv6) {
            $.ipv6 = ipv6;
            return this;
        }

        /**
         * @param ipv6 Enable IPv6 on the instance (boolean; default: `false`).
         * 
         * @return builder
         * 
         */
        public Builder ipv6(Boolean ipv6) {
            return ipv6(Output.of(ipv6));
        }

        /**
         * @param ipv6Address The instance (main network interface) IPv6 address (if enabled).
         * 
         * @return builder
         * 
         */
        public Builder ipv6Address(@Nullable Output<String> ipv6Address) {
            $.ipv6Address = ipv6Address;
            return this;
        }

        /**
         * @param ipv6Address The instance (main network interface) IPv6 address (if enabled).
         * 
         * @return builder
         * 
         */
        public Builder ipv6Address(String ipv6Address) {
            return ipv6Address(Output.of(ipv6Address));
        }

        /**
         * @param labels A map of key/value labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels A map of key/value labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name The compute instance name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The compute instance name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkInterfaces Private network interfaces (may be specified multiple times). Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(@Nullable Output<List<ComputeInstanceNetworkInterfaceArgs>> networkInterfaces) {
            $.networkInterfaces = networkInterfaces;
            return this;
        }

        /**
         * @param networkInterfaces Private network interfaces (may be specified multiple times). Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(List<ComputeInstanceNetworkInterfaceArgs> networkInterfaces) {
            return networkInterfaces(Output.of(networkInterfaces));
        }

        /**
         * @param networkInterfaces Private network interfaces (may be specified multiple times). Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(ComputeInstanceNetworkInterfaceArgs... networkInterfaces) {
            return networkInterfaces(List.of(networkInterfaces));
        }

        /**
         * @param privateNetworkIds (Deprecated) A list of private networks (IDs) attached to the instance. Please use the `network_interface.*.network_id` argument instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use the network_interface block instead.
         * 
         */
        @Deprecated /* Use the network_interface block instead. */
        public Builder privateNetworkIds(@Nullable Output<List<String>> privateNetworkIds) {
            $.privateNetworkIds = privateNetworkIds;
            return this;
        }

        /**
         * @param privateNetworkIds (Deprecated) A list of private networks (IDs) attached to the instance. Please use the `network_interface.*.network_id` argument instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use the network_interface block instead.
         * 
         */
        @Deprecated /* Use the network_interface block instead. */
        public Builder privateNetworkIds(List<String> privateNetworkIds) {
            return privateNetworkIds(Output.of(privateNetworkIds));
        }

        /**
         * @param privateNetworkIds (Deprecated) A list of private networks (IDs) attached to the instance. Please use the `network_interface.*.network_id` argument instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use the network_interface block instead.
         * 
         */
        @Deprecated /* Use the network_interface block instead. */
        public Builder privateNetworkIds(String... privateNetworkIds) {
            return privateNetworkIds(List.of(privateNetworkIds));
        }

        /**
         * @param publicIpAddress The instance (main network interface) IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder publicIpAddress(@Nullable Output<String> publicIpAddress) {
            $.publicIpAddress = publicIpAddress;
            return this;
        }

        /**
         * @param publicIpAddress The instance (main network interface) IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder publicIpAddress(String publicIpAddress) {
            return publicIpAddress(Output.of(publicIpAddress));
        }

        /**
         * @param securityGroupIds A list of exoscale.SecurityGroup (IDs) to attach to the instance.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        /**
         * @param securityGroupIds A list of exoscale.SecurityGroup (IDs) to attach to the instance.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(List<String> securityGroupIds) {
            return securityGroupIds(Output.of(securityGroupIds));
        }

        /**
         * @param securityGroupIds A list of exoscale.SecurityGroup (IDs) to attach to the instance.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        /**
         * @param sshKey The exoscale.SSHKey (name) to authorize in the instance (may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder sshKey(@Nullable Output<String> sshKey) {
            $.sshKey = sshKey;
            return this;
        }

        /**
         * @param sshKey The exoscale.SSHKey (name) to authorize in the instance (may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder sshKey(String sshKey) {
            return sshKey(Output.of(sshKey));
        }

        /**
         * @param state The instance state (`running` or `stopped`; default: `running`).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The instance state (`running` or `stopped`; default: `running`).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param templateId The exoscale.getComputeTemplate (ID) to use when creating the instance.
         * 
         * @return builder
         * 
         */
        public Builder templateId(@Nullable Output<String> templateId) {
            $.templateId = templateId;
            return this;
        }

        /**
         * @param templateId The exoscale.getComputeTemplate (ID) to use when creating the instance.
         * 
         * @return builder
         * 
         */
        public Builder templateId(String templateId) {
            return templateId(Output.of(templateId));
        }

        /**
         * @param type The instance type (`&lt;family&gt;.&lt;size&gt;`, e.g. `standard.medium`; use the [Exoscale CLI][cli] - `exo compute instance-type list` - for the list of available types). **WARNING**: updating this attribute stops/restarts the instance.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The instance type (`&lt;family&gt;.&lt;size&gt;`, e.g. `standard.medium`; use the [Exoscale CLI][cli] - `exo compute instance-type list` - for the list of available types). **WARNING**: updating this attribute stops/restarts the instance.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param userData [cloud-init][cloud-init] configuration (no need to base64-encode or gzip it as the provider will take care of it).
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData [cloud-init][cloud-init] configuration (no need to base64-encode or gzip it as the provider will take care of it).
         * 
         * @return builder
         * 
         */
        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        /**
         * @param zone The Exoscale [Zone][zone] name.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The Exoscale [Zone][zone] name.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public ComputeInstanceState build() {
            return $;
        }
    }

}
