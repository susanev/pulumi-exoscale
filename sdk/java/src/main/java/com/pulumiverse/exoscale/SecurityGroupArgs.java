// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityGroupArgs Empty = new SecurityGroupArgs();

    /**
     * A free-form text describing the group.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A free-form text describing the group.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A list of external network sources, in [CIDR][cidr] notation.
     * 
     */
    @Import(name="externalSources")
    private @Nullable Output<List<String>> externalSources;

    /**
     * @return A list of external network sources, in [CIDR][cidr] notation.
     * 
     */
    public Optional<Output<List<String>>> externalSources() {
        return Optional.ofNullable(this.externalSources);
    }

    /**
     * The security group name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The security group name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private SecurityGroupArgs() {}

    private SecurityGroupArgs(SecurityGroupArgs $) {
        this.description = $.description;
        this.externalSources = $.externalSources;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityGroupArgs $;

        public Builder() {
            $ = new SecurityGroupArgs();
        }

        public Builder(SecurityGroupArgs defaults) {
            $ = new SecurityGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A free-form text describing the group.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A free-form text describing the group.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param externalSources A list of external network sources, in [CIDR][cidr] notation.
         * 
         * @return builder
         * 
         */
        public Builder externalSources(@Nullable Output<List<String>> externalSources) {
            $.externalSources = externalSources;
            return this;
        }

        /**
         * @param externalSources A list of external network sources, in [CIDR][cidr] notation.
         * 
         * @return builder
         * 
         */
        public Builder externalSources(List<String> externalSources) {
            return externalSources(Output.of(externalSources));
        }

        /**
         * @param externalSources A list of external network sources, in [CIDR][cidr] notation.
         * 
         * @return builder
         * 
         */
        public Builder externalSources(String... externalSources) {
            return externalSources(List.of(externalSources));
        }

        /**
         * @param name The security group name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The security group name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public SecurityGroupArgs build() {
            return $;
        }
    }

}
