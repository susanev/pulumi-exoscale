// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ElasticIPHealthcheck {
    /**
     * @return The healthcheck interval (seconds; must be between `5` and `300`; default: `10`).
     * 
     */
    private @Nullable Integer interval;
    /**
     * @return The healthcheck mode (`tcp`, `http` or `https`; may only be set at creation time).
     * 
     */
    private String mode;
    /**
     * @return The healthcheck target port (must be between `1` and `65535`).
     * 
     */
    private Integer port;
    /**
     * @return The number of failed healthcheck attempts before considering the target unhealthy (must be between `1` and `20`; default: `2`).
     * 
     */
    private @Nullable Integer strikesFail;
    /**
     * @return The number of successful healthcheck attempts before considering the target healthy (must be between `1` and `20`; default: `3`).
     * 
     */
    private @Nullable Integer strikesOk;
    /**
     * @return The time before considering a healthcheck probing failed (seconds; must be between `2` and `60`; default: `3`).
     * 
     */
    private @Nullable Integer timeout;
    /**
     * @return Disable TLS certificate verification for healthcheck in `https` mode (boolean; default: `false`).
     * 
     */
    private @Nullable Boolean tlsSkipVerify;
    /**
     * @return The healthcheck server name to present with SNI in `https` mode.
     * 
     */
    private @Nullable String tlsSni;
    /**
     * @return The healthcheck target URI (required in `http(s)` modes).
     * 
     */
    private @Nullable String uri;

    private ElasticIPHealthcheck() {}
    /**
     * @return The healthcheck interval (seconds; must be between `5` and `300`; default: `10`).
     * 
     */
    public Optional<Integer> interval() {
        return Optional.ofNullable(this.interval);
    }
    /**
     * @return The healthcheck mode (`tcp`, `http` or `https`; may only be set at creation time).
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return The healthcheck target port (must be between `1` and `65535`).
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The number of failed healthcheck attempts before considering the target unhealthy (must be between `1` and `20`; default: `2`).
     * 
     */
    public Optional<Integer> strikesFail() {
        return Optional.ofNullable(this.strikesFail);
    }
    /**
     * @return The number of successful healthcheck attempts before considering the target healthy (must be between `1` and `20`; default: `3`).
     * 
     */
    public Optional<Integer> strikesOk() {
        return Optional.ofNullable(this.strikesOk);
    }
    /**
     * @return The time before considering a healthcheck probing failed (seconds; must be between `2` and `60`; default: `3`).
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    /**
     * @return Disable TLS certificate verification for healthcheck in `https` mode (boolean; default: `false`).
     * 
     */
    public Optional<Boolean> tlsSkipVerify() {
        return Optional.ofNullable(this.tlsSkipVerify);
    }
    /**
     * @return The healthcheck server name to present with SNI in `https` mode.
     * 
     */
    public Optional<String> tlsSni() {
        return Optional.ofNullable(this.tlsSni);
    }
    /**
     * @return The healthcheck target URI (required in `http(s)` modes).
     * 
     */
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ElasticIPHealthcheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer interval;
        private String mode;
        private Integer port;
        private @Nullable Integer strikesFail;
        private @Nullable Integer strikesOk;
        private @Nullable Integer timeout;
        private @Nullable Boolean tlsSkipVerify;
        private @Nullable String tlsSni;
        private @Nullable String uri;
        public Builder() {}
        public Builder(ElasticIPHealthcheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interval = defaults.interval;
    	      this.mode = defaults.mode;
    	      this.port = defaults.port;
    	      this.strikesFail = defaults.strikesFail;
    	      this.strikesOk = defaults.strikesOk;
    	      this.timeout = defaults.timeout;
    	      this.tlsSkipVerify = defaults.tlsSkipVerify;
    	      this.tlsSni = defaults.tlsSni;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder interval(@Nullable Integer interval) {
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder strikesFail(@Nullable Integer strikesFail) {
            this.strikesFail = strikesFail;
            return this;
        }
        @CustomType.Setter
        public Builder strikesOk(@Nullable Integer strikesOk) {
            this.strikesOk = strikesOk;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder tlsSkipVerify(@Nullable Boolean tlsSkipVerify) {
            this.tlsSkipVerify = tlsSkipVerify;
            return this;
        }
        @CustomType.Setter
        public Builder tlsSni(@Nullable String tlsSni) {
            this.tlsSni = tlsSni;
            return this;
        }
        @CustomType.Setter
        public Builder uri(@Nullable String uri) {
            this.uri = uri;
            return this;
        }
        public ElasticIPHealthcheck build() {
            final var o = new ElasticIPHealthcheck();
            o.interval = interval;
            o.mode = mode;
            o.port = port;
            o.strikesFail = strikesFail;
            o.strikesOk = strikesOk;
            o.timeout = timeout;
            o.tlsSkipVerify = tlsSkipVerify;
            o.tlsSni = tlsSni;
            o.uri = uri;
            return o;
        }
    }
}
