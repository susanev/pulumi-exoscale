// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseKafka {
    /**
     * @return Enable certificate-based authentication method.
     * 
     */
    private @Nullable Boolean enableCertAuth;
    /**
     * @return Enable Kafka Connect.
     * 
     */
    private @Nullable Boolean enableKafkaConnect;
    /**
     * @return Enable Kafka REST.
     * 
     */
    private @Nullable Boolean enableKafkaRest;
    /**
     * @return Enable SASL-based authentication method.
     * 
     */
    private @Nullable Boolean enableSaslAuth;
    /**
     * @return Enable Schema Registry.
     * 
     */
    private @Nullable Boolean enableSchemaRegistry;
    /**
     * @return A list of CIDR blocks to allow incoming connections from.
     * 
     */
    private @Nullable List<String> ipFilters;
    /**
     * @return Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
     * 
     */
    private @Nullable String kafkaConnectSettings;
    /**
     * @return Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
     * 
     */
    private @Nullable String kafkaRestSettings;
    /**
     * @return Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
     * 
     */
    private @Nullable String kafkaSettings;
    /**
     * @return Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
     * 
     */
    private @Nullable String schemaRegistrySettings;
    /**
     * @return PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
     * 
     */
    private @Nullable String version;

    private DatabaseKafka() {}
    /**
     * @return Enable certificate-based authentication method.
     * 
     */
    public Optional<Boolean> enableCertAuth() {
        return Optional.ofNullable(this.enableCertAuth);
    }
    /**
     * @return Enable Kafka Connect.
     * 
     */
    public Optional<Boolean> enableKafkaConnect() {
        return Optional.ofNullable(this.enableKafkaConnect);
    }
    /**
     * @return Enable Kafka REST.
     * 
     */
    public Optional<Boolean> enableKafkaRest() {
        return Optional.ofNullable(this.enableKafkaRest);
    }
    /**
     * @return Enable SASL-based authentication method.
     * 
     */
    public Optional<Boolean> enableSaslAuth() {
        return Optional.ofNullable(this.enableSaslAuth);
    }
    /**
     * @return Enable Schema Registry.
     * 
     */
    public Optional<Boolean> enableSchemaRegistry() {
        return Optional.ofNullable(this.enableSchemaRegistry);
    }
    /**
     * @return A list of CIDR blocks to allow incoming connections from.
     * 
     */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
     * 
     */
    public Optional<String> kafkaConnectSettings() {
        return Optional.ofNullable(this.kafkaConnectSettings);
    }
    /**
     * @return Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
     * 
     */
    public Optional<String> kafkaRestSettings() {
        return Optional.ofNullable(this.kafkaRestSettings);
    }
    /**
     * @return Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
     * 
     */
    public Optional<String> kafkaSettings() {
        return Optional.ofNullable(this.kafkaSettings);
    }
    /**
     * @return Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
     * 
     */
    public Optional<String> schemaRegistrySettings() {
        return Optional.ofNullable(this.schemaRegistrySettings);
    }
    /**
     * @return PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseKafka defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enableCertAuth;
        private @Nullable Boolean enableKafkaConnect;
        private @Nullable Boolean enableKafkaRest;
        private @Nullable Boolean enableSaslAuth;
        private @Nullable Boolean enableSchemaRegistry;
        private @Nullable List<String> ipFilters;
        private @Nullable String kafkaConnectSettings;
        private @Nullable String kafkaRestSettings;
        private @Nullable String kafkaSettings;
        private @Nullable String schemaRegistrySettings;
        private @Nullable String version;
        public Builder() {}
        public Builder(DatabaseKafka defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableCertAuth = defaults.enableCertAuth;
    	      this.enableKafkaConnect = defaults.enableKafkaConnect;
    	      this.enableKafkaRest = defaults.enableKafkaRest;
    	      this.enableSaslAuth = defaults.enableSaslAuth;
    	      this.enableSchemaRegistry = defaults.enableSchemaRegistry;
    	      this.ipFilters = defaults.ipFilters;
    	      this.kafkaConnectSettings = defaults.kafkaConnectSettings;
    	      this.kafkaRestSettings = defaults.kafkaRestSettings;
    	      this.kafkaSettings = defaults.kafkaSettings;
    	      this.schemaRegistrySettings = defaults.schemaRegistrySettings;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder enableCertAuth(@Nullable Boolean enableCertAuth) {
            this.enableCertAuth = enableCertAuth;
            return this;
        }
        @CustomType.Setter
        public Builder enableKafkaConnect(@Nullable Boolean enableKafkaConnect) {
            this.enableKafkaConnect = enableKafkaConnect;
            return this;
        }
        @CustomType.Setter
        public Builder enableKafkaRest(@Nullable Boolean enableKafkaRest) {
            this.enableKafkaRest = enableKafkaRest;
            return this;
        }
        @CustomType.Setter
        public Builder enableSaslAuth(@Nullable Boolean enableSaslAuth) {
            this.enableSaslAuth = enableSaslAuth;
            return this;
        }
        @CustomType.Setter
        public Builder enableSchemaRegistry(@Nullable Boolean enableSchemaRegistry) {
            this.enableSchemaRegistry = enableSchemaRegistry;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder kafkaConnectSettings(@Nullable String kafkaConnectSettings) {
            this.kafkaConnectSettings = kafkaConnectSettings;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaRestSettings(@Nullable String kafkaRestSettings) {
            this.kafkaRestSettings = kafkaRestSettings;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaSettings(@Nullable String kafkaSettings) {
            this.kafkaSettings = kafkaSettings;
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistrySettings(@Nullable String schemaRegistrySettings) {
            this.schemaRegistrySettings = schemaRegistrySettings;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }
        public DatabaseKafka build() {
            final var o = new DatabaseKafka();
            o.enableCertAuth = enableCertAuth;
            o.enableKafkaConnect = enableKafkaConnect;
            o.enableKafkaRest = enableKafkaRest;
            o.enableSaslAuth = enableSaslAuth;
            o.enableSchemaRegistry = enableSchemaRegistry;
            o.ipFilters = ipFilters;
            o.kafkaConnectSettings = kafkaConnectSettings;
            o.kafkaRestSettings = kafkaRestSettings;
            o.kafkaSettings = kafkaSettings;
            o.schemaRegistrySettings = schemaRegistrySettings;
            o.version = version;
            return o;
        }
    }
}
