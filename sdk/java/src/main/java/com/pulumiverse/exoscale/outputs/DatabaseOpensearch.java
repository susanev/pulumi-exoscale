// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumiverse.exoscale.outputs.DatabaseOpensearchDashboards;
import com.pulumiverse.exoscale.outputs.DatabaseOpensearchIndexPattern;
import com.pulumiverse.exoscale.outputs.DatabaseOpensearchIndexTemplate;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseOpensearch {
    private @Nullable DatabaseOpensearchDashboards dashboards;
    /**
     * @return Service name
     * 
     */
    private @Nullable String forkFromService;
    /**
     * @return Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like &#39;logs.?&#39; and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note &#39;logs.?&#39; does not apply to logs.10. Note: Setting max_index_count to 0 will do nothing and the pattern gets ignored.
     * 
     */
    private @Nullable List<DatabaseOpensearchIndexPattern> indexPatterns;
    /**
     * @return Template settings for all new indexes
     * 
     */
    private @Nullable DatabaseOpensearchIndexTemplate indexTemplate;
    /**
     * @return A list of CIDR blocks to allow incoming connections from.
     * 
     */
    private @Nullable List<String> ipFilters;
    /**
     * @return Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
     * 
     */
    private @Nullable Boolean keepIndexRefreshInterval;
    /**
     * @return Maximum number of indexes to keep before deleting the oldest one (Minimum value is `0`)
     * * `dashboards`
     * 
     */
    private @Nullable Integer maxIndexCount;
    /**
     * @return -
     * 
     */
    private @Nullable String recoveryBackupName;
    private @Nullable String settings;
    /**
     * @return PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
     * 
     */
    private @Nullable String version;

    private DatabaseOpensearch() {}
    public Optional<DatabaseOpensearchDashboards> dashboards() {
        return Optional.ofNullable(this.dashboards);
    }
    /**
     * @return Service name
     * 
     */
    public Optional<String> forkFromService() {
        return Optional.ofNullable(this.forkFromService);
    }
    /**
     * @return Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like &#39;logs.?&#39; and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note &#39;logs.?&#39; does not apply to logs.10. Note: Setting max_index_count to 0 will do nothing and the pattern gets ignored.
     * 
     */
    public List<DatabaseOpensearchIndexPattern> indexPatterns() {
        return this.indexPatterns == null ? List.of() : this.indexPatterns;
    }
    /**
     * @return Template settings for all new indexes
     * 
     */
    public Optional<DatabaseOpensearchIndexTemplate> indexTemplate() {
        return Optional.ofNullable(this.indexTemplate);
    }
    /**
     * @return A list of CIDR blocks to allow incoming connections from.
     * 
     */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
     * 
     */
    public Optional<Boolean> keepIndexRefreshInterval() {
        return Optional.ofNullable(this.keepIndexRefreshInterval);
    }
    /**
     * @return Maximum number of indexes to keep before deleting the oldest one (Minimum value is `0`)
     * * `dashboards`
     * 
     */
    public Optional<Integer> maxIndexCount() {
        return Optional.ofNullable(this.maxIndexCount);
    }
    /**
     * @return -
     * 
     */
    public Optional<String> recoveryBackupName() {
        return Optional.ofNullable(this.recoveryBackupName);
    }
    public Optional<String> settings() {
        return Optional.ofNullable(this.settings);
    }
    /**
     * @return PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseOpensearch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DatabaseOpensearchDashboards dashboards;
        private @Nullable String forkFromService;
        private @Nullable List<DatabaseOpensearchIndexPattern> indexPatterns;
        private @Nullable DatabaseOpensearchIndexTemplate indexTemplate;
        private @Nullable List<String> ipFilters;
        private @Nullable Boolean keepIndexRefreshInterval;
        private @Nullable Integer maxIndexCount;
        private @Nullable String recoveryBackupName;
        private @Nullable String settings;
        private @Nullable String version;
        public Builder() {}
        public Builder(DatabaseOpensearch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dashboards = defaults.dashboards;
    	      this.forkFromService = defaults.forkFromService;
    	      this.indexPatterns = defaults.indexPatterns;
    	      this.indexTemplate = defaults.indexTemplate;
    	      this.ipFilters = defaults.ipFilters;
    	      this.keepIndexRefreshInterval = defaults.keepIndexRefreshInterval;
    	      this.maxIndexCount = defaults.maxIndexCount;
    	      this.recoveryBackupName = defaults.recoveryBackupName;
    	      this.settings = defaults.settings;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder dashboards(@Nullable DatabaseOpensearchDashboards dashboards) {
            this.dashboards = dashboards;
            return this;
        }
        @CustomType.Setter
        public Builder forkFromService(@Nullable String forkFromService) {
            this.forkFromService = forkFromService;
            return this;
        }
        @CustomType.Setter
        public Builder indexPatterns(@Nullable List<DatabaseOpensearchIndexPattern> indexPatterns) {
            this.indexPatterns = indexPatterns;
            return this;
        }
        public Builder indexPatterns(DatabaseOpensearchIndexPattern... indexPatterns) {
            return indexPatterns(List.of(indexPatterns));
        }
        @CustomType.Setter
        public Builder indexTemplate(@Nullable DatabaseOpensearchIndexTemplate indexTemplate) {
            this.indexTemplate = indexTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder keepIndexRefreshInterval(@Nullable Boolean keepIndexRefreshInterval) {
            this.keepIndexRefreshInterval = keepIndexRefreshInterval;
            return this;
        }
        @CustomType.Setter
        public Builder maxIndexCount(@Nullable Integer maxIndexCount) {
            this.maxIndexCount = maxIndexCount;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryBackupName(@Nullable String recoveryBackupName) {
            this.recoveryBackupName = recoveryBackupName;
            return this;
        }
        @CustomType.Setter
        public Builder settings(@Nullable String settings) {
            this.settings = settings;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }
        public DatabaseOpensearch build() {
            final var o = new DatabaseOpensearch();
            o.dashboards = dashboards;
            o.forkFromService = forkFromService;
            o.indexPatterns = indexPatterns;
            o.indexTemplate = indexTemplate;
            o.ipFilters = ipFilters;
            o.keepIndexRefreshInterval = keepIndexRefreshInterval;
            o.maxIndexCount = maxIndexCount;
            o.recoveryBackupName = recoveryBackupName;
            o.settings = settings;
            o.version = version;
            return o;
        }
    }
}
