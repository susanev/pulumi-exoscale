// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetElasticIPHealthcheck {
    /**
     * @return The healthcheck interval in seconds.
     * 
     */
    private Integer interval;
    /**
     * @return The healthcheck mode.
     * 
     */
    private String mode;
    /**
     * @return The healthcheck target port.
     * 
     */
    private Integer port;
    /**
     * @return The number of failed healthcheck attempts before considering the target unhealthy.
     * 
     */
    private Integer strikesFail;
    /**
     * @return The number of successful healthcheck attempts before considering the target healthy.
     * 
     */
    private Integer strikesOk;
    /**
     * @return The time in seconds before considering a healthcheck probing failed.
     * 
     */
    private Integer timeout;
    /**
     * @return Disable TLS certificate verification for healthcheck in `https` mode.
     * 
     */
    private Boolean tlsSkipVerify;
    /**
     * @return The healthcheck server name to present with SNI in `https` mode.
     * 
     */
    private String tlsSni;
    /**
     * @return The healthcheck URI.
     * 
     */
    private String uri;

    private GetElasticIPHealthcheck() {}
    /**
     * @return The healthcheck interval in seconds.
     * 
     */
    public Integer interval() {
        return this.interval;
    }
    /**
     * @return The healthcheck mode.
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return The healthcheck target port.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The number of failed healthcheck attempts before considering the target unhealthy.
     * 
     */
    public Integer strikesFail() {
        return this.strikesFail;
    }
    /**
     * @return The number of successful healthcheck attempts before considering the target healthy.
     * 
     */
    public Integer strikesOk() {
        return this.strikesOk;
    }
    /**
     * @return The time in seconds before considering a healthcheck probing failed.
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }
    /**
     * @return Disable TLS certificate verification for healthcheck in `https` mode.
     * 
     */
    public Boolean tlsSkipVerify() {
        return this.tlsSkipVerify;
    }
    /**
     * @return The healthcheck server name to present with SNI in `https` mode.
     * 
     */
    public String tlsSni() {
        return this.tlsSni;
    }
    /**
     * @return The healthcheck URI.
     * 
     */
    public String uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetElasticIPHealthcheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer interval;
        private String mode;
        private Integer port;
        private Integer strikesFail;
        private Integer strikesOk;
        private Integer timeout;
        private Boolean tlsSkipVerify;
        private String tlsSni;
        private String uri;
        public Builder() {}
        public Builder(GetElasticIPHealthcheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interval = defaults.interval;
    	      this.mode = defaults.mode;
    	      this.port = defaults.port;
    	      this.strikesFail = defaults.strikesFail;
    	      this.strikesOk = defaults.strikesOk;
    	      this.timeout = defaults.timeout;
    	      this.tlsSkipVerify = defaults.tlsSkipVerify;
    	      this.tlsSni = defaults.tlsSni;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder interval(Integer interval) {
            this.interval = Objects.requireNonNull(interval);
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder strikesFail(Integer strikesFail) {
            this.strikesFail = Objects.requireNonNull(strikesFail);
            return this;
        }
        @CustomType.Setter
        public Builder strikesOk(Integer strikesOk) {
            this.strikesOk = Objects.requireNonNull(strikesOk);
            return this;
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }
        @CustomType.Setter
        public Builder tlsSkipVerify(Boolean tlsSkipVerify) {
            this.tlsSkipVerify = Objects.requireNonNull(tlsSkipVerify);
            return this;
        }
        @CustomType.Setter
        public Builder tlsSni(String tlsSni) {
            this.tlsSni = Objects.requireNonNull(tlsSni);
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }
        public GetElasticIPHealthcheck build() {
            final var o = new GetElasticIPHealthcheck();
            o.interval = interval;
            o.mode = mode;
            o.port = port;
            o.strikesFail = strikesFail;
            o.strikesOk = strikesOk;
            o.timeout = timeout;
            o.tlsSkipVerify = tlsSkipVerify;
            o.tlsSni = tlsSni;
            o.uri = uri;
            return o;
        }
    }
}
