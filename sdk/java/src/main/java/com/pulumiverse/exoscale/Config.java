// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale;

import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("exoscale");
/**
 * Exoscale CloudStack API endpoint (by default: https://api.exoscale.com/v1)
 * 
 */
    public Optional<String> computeEndpoint() {
        return Codegen.stringProp("computeEndpoint").config(config).get();
    }
/**
 * CloudStack ini configuration filename (by default: cloudstack.ini)
 * 
 */
    public Optional<String> config() {
        return Codegen.stringProp("config").config(config).get();
    }
    public Optional<Integer> delay() {
        return Codegen.integerProp("delay").config(config).get();
    }
/**
 * Exoscale DNS API endpoint (by default: https://api.exoscale.com/dns)
 * 
 */
    public String dnsEndpoint() {
        return Codegen.stringProp("dnsEndpoint").config(config).require();
    }
    public Optional<String> environment() {
        return Codegen.stringProp("environment").config(config).get();
    }
/**
 * Defines if the user-data of compute instances should be gzipped (by default: true)
 * 
 */
    public Optional<Boolean> gzipUserData() {
        return Codegen.booleanProp("gzipUserData").config(config).get();
    }
/**
 * Exoscale API key
 * 
 */
    public Optional<String> key() {
        return Codegen.stringProp("key").config(config).get();
    }
    public Optional<String> profile() {
        return Codegen.stringProp("profile").config(config).get();
    }
/**
 * CloudStack ini configuration section name (by default: cloudstack)
 * 
 */
    public Optional<String> region() {
        return Codegen.stringProp("region").config(config).get();
    }
/**
 * Exoscale API secret
 * 
 */
    public Optional<String> secret() {
        return Codegen.stringProp("secret").config(config).get();
    }
/**
 * Timeout in seconds for waiting on compute resources to become available (by default: 300)
 * 
 */
    public Integer timeout() {
        return Codegen.integerProp("timeout").config(config).require();
    }
    public Optional<String> token() {
        return Codegen.stringProp("token").config(config).get();
    }
}
