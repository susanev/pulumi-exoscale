// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumiverse.exoscale.inputs.SKSClusterOidcArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SKSClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final SKSClusterArgs Empty = new SKSClusterArgs();

    /**
     * @deprecated
     * This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
     * 
     */
    @Deprecated /* This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release. */
    @Import(name="addons")
    private @Nullable Output<List<String>> addons;

    /**
     * @deprecated
     * This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
     * 
     */
    @Deprecated /* This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release. */
    public Optional<Output<List<String>>> addons() {
        return Optional.ofNullable(this.addons);
    }

    /**
     * Enable automatic upgrading of the control plane version (boolean; default: `false`).
     * 
     */
    @Import(name="autoUpgrade")
    private @Nullable Output<Boolean> autoUpgrade;

    /**
     * @return Enable automatic upgrading of the control plane version (boolean; default: `false`).
     * 
     */
    public Optional<Output<Boolean>> autoUpgrade() {
        return Optional.ofNullable(this.autoUpgrade);
    }

    @Import(name="cni")
    private @Nullable Output<String> cni;

    public Optional<Output<String>> cni() {
        return Optional.ofNullable(this.cni);
    }

    /**
     * A free-form text describing the cluster.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A free-form text describing the cluster.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Deploy the Exoscale [Cloud Controller Manager][ccm] in the control plane (boolean; default: `true`; may only be set at creation time).
     * 
     */
    @Import(name="exoscaleCcm")
    private @Nullable Output<Boolean> exoscaleCcm;

    /**
     * @return Deploy the Exoscale [Cloud Controller Manager][ccm] in the control plane (boolean; default: `true`; may only be set at creation time).
     * 
     */
    public Optional<Output<Boolean>> exoscaleCcm() {
        return Optional.ofNullable(this.exoscaleCcm);
    }

    /**
     * A map of key/value labels.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return A map of key/value labels.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Deploy the [Kubernetes Metrics Server][ms] in the control plane (boolean; default: `true`; may only be set at creation time).
     * 
     */
    @Import(name="metricsServer")
    private @Nullable Output<Boolean> metricsServer;

    /**
     * @return Deploy the [Kubernetes Metrics Server][ms] in the control plane (boolean; default: `true`; may only be set at creation time).
     * 
     */
    public Optional<Output<Boolean>> metricsServer() {
        return Optional.ofNullable(this.metricsServer);
    }

    /**
     * The SKS cluster name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The SKS cluster name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
     * 
     */
    @Import(name="oidc")
    private @Nullable Output<SKSClusterOidcArgs> oidc;

    /**
     * @return An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
     * 
     */
    public Optional<Output<SKSClusterOidcArgs>> oidc() {
        return Optional.ofNullable(this.oidc);
    }

    /**
     * The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
     * 
     */
    @Import(name="serviceLevel")
    private @Nullable Output<String> serviceLevel;

    /**
     * @return The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
     * 
     */
    public Optional<Output<String>> serviceLevel() {
        return Optional.ofNullable(this.serviceLevel);
    }

    /**
     * The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    /**
     * The Exoscale [Zone][zone] name.
     * 
     */
    @Import(name="zone", required=true)
    private Output<String> zone;

    /**
     * @return The Exoscale [Zone][zone] name.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    private SKSClusterArgs() {}

    private SKSClusterArgs(SKSClusterArgs $) {
        this.addons = $.addons;
        this.autoUpgrade = $.autoUpgrade;
        this.cni = $.cni;
        this.description = $.description;
        this.exoscaleCcm = $.exoscaleCcm;
        this.labels = $.labels;
        this.metricsServer = $.metricsServer;
        this.name = $.name;
        this.oidc = $.oidc;
        this.serviceLevel = $.serviceLevel;
        this.version = $.version;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SKSClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SKSClusterArgs $;

        public Builder() {
            $ = new SKSClusterArgs();
        }

        public Builder(SKSClusterArgs defaults) {
            $ = new SKSClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
         * 
         */
        @Deprecated /* This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release. */
        public Builder addons(@Nullable Output<List<String>> addons) {
            $.addons = addons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
         * 
         */
        @Deprecated /* This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release. */
        public Builder addons(List<String> addons) {
            return addons(Output.of(addons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
         * 
         */
        @Deprecated /* This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release. */
        public Builder addons(String... addons) {
            return addons(List.of(addons));
        }

        /**
         * @param autoUpgrade Enable automatic upgrading of the control plane version (boolean; default: `false`).
         * 
         * @return builder
         * 
         */
        public Builder autoUpgrade(@Nullable Output<Boolean> autoUpgrade) {
            $.autoUpgrade = autoUpgrade;
            return this;
        }

        /**
         * @param autoUpgrade Enable automatic upgrading of the control plane version (boolean; default: `false`).
         * 
         * @return builder
         * 
         */
        public Builder autoUpgrade(Boolean autoUpgrade) {
            return autoUpgrade(Output.of(autoUpgrade));
        }

        public Builder cni(@Nullable Output<String> cni) {
            $.cni = cni;
            return this;
        }

        public Builder cni(String cni) {
            return cni(Output.of(cni));
        }

        /**
         * @param description A free-form text describing the cluster.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A free-form text describing the cluster.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param exoscaleCcm Deploy the Exoscale [Cloud Controller Manager][ccm] in the control plane (boolean; default: `true`; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder exoscaleCcm(@Nullable Output<Boolean> exoscaleCcm) {
            $.exoscaleCcm = exoscaleCcm;
            return this;
        }

        /**
         * @param exoscaleCcm Deploy the Exoscale [Cloud Controller Manager][ccm] in the control plane (boolean; default: `true`; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder exoscaleCcm(Boolean exoscaleCcm) {
            return exoscaleCcm(Output.of(exoscaleCcm));
        }

        /**
         * @param labels A map of key/value labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels A map of key/value labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param metricsServer Deploy the [Kubernetes Metrics Server][ms] in the control plane (boolean; default: `true`; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder metricsServer(@Nullable Output<Boolean> metricsServer) {
            $.metricsServer = metricsServer;
            return this;
        }

        /**
         * @param metricsServer Deploy the [Kubernetes Metrics Server][ms] in the control plane (boolean; default: `true`; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder metricsServer(Boolean metricsServer) {
            return metricsServer(Output.of(metricsServer));
        }

        /**
         * @param name The SKS cluster name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The SKS cluster name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param oidc An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oidc(@Nullable Output<SKSClusterOidcArgs> oidc) {
            $.oidc = oidc;
            return this;
        }

        /**
         * @param oidc An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oidc(SKSClusterOidcArgs oidc) {
            return oidc(Output.of(oidc));
        }

        /**
         * @param serviceLevel The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(@Nullable Output<String> serviceLevel) {
            $.serviceLevel = serviceLevel;
            return this;
        }

        /**
         * @param serviceLevel The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(String serviceLevel) {
            return serviceLevel(Output.of(serviceLevel));
        }

        /**
         * @param version The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        /**
         * @param zone The Exoscale [Zone][zone] name.
         * 
         * @return builder
         * 
         */
        public Builder zone(Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The Exoscale [Zone][zone] name.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public SKSClusterArgs build() {
            $.zone = Objects.requireNonNull($.zone, "expected parameter 'zone' to be non-null");
            return $;
        }
    }

}
