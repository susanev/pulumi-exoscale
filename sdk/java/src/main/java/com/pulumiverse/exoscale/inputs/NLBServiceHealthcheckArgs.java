// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NLBServiceHealthcheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final NLBServiceHealthcheckArgs Empty = new NLBServiceHealthcheckArgs();

    /**
     * The healthcheck interval in seconds (default: `10`).
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return The healthcheck interval in seconds (default: `10`).
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * The healthcheck mode (`tcp`|`http`|`https`; default: `tcp`).
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The healthcheck mode (`tcp`|`http`|`https`; default: `tcp`).
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The healthcheck port.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The healthcheck port.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * The healthcheck retries (default: `1`).
     * 
     */
    @Import(name="retries")
    private @Nullable Output<Integer> retries;

    /**
     * @return The healthcheck retries (default: `1`).
     * 
     */
    public Optional<Output<Integer>> retries() {
        return Optional.ofNullable(this.retries);
    }

    /**
     * The healthcheck timeout (seconds; default: `5`).
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return The healthcheck timeout (seconds; default: `5`).
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * The healthcheck TLS SNI server name (only if `mode` is `https`).
     * 
     */
    @Import(name="tlsSni")
    private @Nullable Output<String> tlsSni;

    /**
     * @return The healthcheck TLS SNI server name (only if `mode` is `https`).
     * 
     */
    public Optional<Output<String>> tlsSni() {
        return Optional.ofNullable(this.tlsSni);
    }

    /**
     * The healthcheck URI (must be set only if `mode` is `http(s)`).
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return The healthcheck URI (must be set only if `mode` is `http(s)`).
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private NLBServiceHealthcheckArgs() {}

    private NLBServiceHealthcheckArgs(NLBServiceHealthcheckArgs $) {
        this.interval = $.interval;
        this.mode = $.mode;
        this.port = $.port;
        this.retries = $.retries;
        this.timeout = $.timeout;
        this.tlsSni = $.tlsSni;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NLBServiceHealthcheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NLBServiceHealthcheckArgs $;

        public Builder() {
            $ = new NLBServiceHealthcheckArgs();
        }

        public Builder(NLBServiceHealthcheckArgs defaults) {
            $ = new NLBServiceHealthcheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param interval The healthcheck interval in seconds (default: `10`).
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The healthcheck interval in seconds (default: `10`).
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param mode The healthcheck mode (`tcp`|`http`|`https`; default: `tcp`).
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The healthcheck mode (`tcp`|`http`|`https`; default: `tcp`).
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param port The healthcheck port.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The healthcheck port.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param retries The healthcheck retries (default: `1`).
         * 
         * @return builder
         * 
         */
        public Builder retries(@Nullable Output<Integer> retries) {
            $.retries = retries;
            return this;
        }

        /**
         * @param retries The healthcheck retries (default: `1`).
         * 
         * @return builder
         * 
         */
        public Builder retries(Integer retries) {
            return retries(Output.of(retries));
        }

        /**
         * @param timeout The healthcheck timeout (seconds; default: `5`).
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The healthcheck timeout (seconds; default: `5`).
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param tlsSni The healthcheck TLS SNI server name (only if `mode` is `https`).
         * 
         * @return builder
         * 
         */
        public Builder tlsSni(@Nullable Output<String> tlsSni) {
            $.tlsSni = tlsSni;
            return this;
        }

        /**
         * @param tlsSni The healthcheck TLS SNI server name (only if `mode` is `https`).
         * 
         * @return builder
         * 
         */
        public Builder tlsSni(String tlsSni) {
            return tlsSni(Output.of(tlsSni));
        }

        /**
         * @param uri The healthcheck URI (must be set only if `mode` is `http(s)`).
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The healthcheck URI (must be set only if `mode` is `http(s)`).
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public NLBServiceHealthcheckArgs build() {
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            return $;
        }
    }

}
