// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseMysql {
    /**
     * @return A custom administrator account password (may only be set at creation time).
     * 
     */
    private @Nullable String adminPassword;
    /**
     * @return A custom administrator account username (may only be set at creation time).
     * 
     */
    private @Nullable String adminUsername;
    /**
     * @return The automated backup schedule (`HH:MM`).
     * 
     */
    private @Nullable String backupSchedule;
    /**
     * @return A list of CIDR blocks to allow incoming connections from.
     * 
     */
    private @Nullable List<String> ipFilters;
    /**
     * @return MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
     * 
     */
    private @Nullable String mysqlSettings;
    /**
     * @return PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
     * 
     */
    private @Nullable String version;

    private DatabaseMysql() {}
    /**
     * @return A custom administrator account password (may only be set at creation time).
     * 
     */
    public Optional<String> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }
    /**
     * @return A custom administrator account username (may only be set at creation time).
     * 
     */
    public Optional<String> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }
    /**
     * @return The automated backup schedule (`HH:MM`).
     * 
     */
    public Optional<String> backupSchedule() {
        return Optional.ofNullable(this.backupSchedule);
    }
    /**
     * @return A list of CIDR blocks to allow incoming connections from.
     * 
     */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
     * 
     */
    public Optional<String> mysqlSettings() {
        return Optional.ofNullable(this.mysqlSettings);
    }
    /**
     * @return PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseMysql defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String adminPassword;
        private @Nullable String adminUsername;
        private @Nullable String backupSchedule;
        private @Nullable List<String> ipFilters;
        private @Nullable String mysqlSettings;
        private @Nullable String version;
        public Builder() {}
        public Builder(DatabaseMysql defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminPassword = defaults.adminPassword;
    	      this.adminUsername = defaults.adminUsername;
    	      this.backupSchedule = defaults.backupSchedule;
    	      this.ipFilters = defaults.ipFilters;
    	      this.mysqlSettings = defaults.mysqlSettings;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder adminPassword(@Nullable String adminPassword) {
            this.adminPassword = adminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder adminUsername(@Nullable String adminUsername) {
            this.adminUsername = adminUsername;
            return this;
        }
        @CustomType.Setter
        public Builder backupSchedule(@Nullable String backupSchedule) {
            this.backupSchedule = backupSchedule;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder mysqlSettings(@Nullable String mysqlSettings) {
            this.mysqlSettings = mysqlSettings;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }
        public DatabaseMysql build() {
            final var o = new DatabaseMysql();
            o.adminPassword = adminPassword;
            o.adminUsername = adminUsername;
            o.backupSchedule = backupSchedule;
            o.ipFilters = ipFilters;
            o.mysqlSettings = mysqlSettings;
            o.version = version;
            return o;
        }
    }
}
