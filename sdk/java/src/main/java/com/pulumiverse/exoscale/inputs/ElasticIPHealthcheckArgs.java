// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ElasticIPHealthcheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final ElasticIPHealthcheckArgs Empty = new ElasticIPHealthcheckArgs();

    /**
     * The healthcheck interval (seconds; must be between `5` and `300`; default: `10`).
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return The healthcheck interval (seconds; must be between `5` and `300`; default: `10`).
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * The healthcheck mode (`tcp`, `http` or `https`; may only be set at creation time).
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return The healthcheck mode (`tcp`, `http` or `https`; may only be set at creation time).
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * The healthcheck target port (must be between `1` and `65535`).
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The healthcheck target port (must be between `1` and `65535`).
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * The number of failed healthcheck attempts before considering the target unhealthy (must be between `1` and `20`; default: `2`).
     * 
     */
    @Import(name="strikesFail")
    private @Nullable Output<Integer> strikesFail;

    /**
     * @return The number of failed healthcheck attempts before considering the target unhealthy (must be between `1` and `20`; default: `2`).
     * 
     */
    public Optional<Output<Integer>> strikesFail() {
        return Optional.ofNullable(this.strikesFail);
    }

    /**
     * The number of successful healthcheck attempts before considering the target healthy (must be between `1` and `20`; default: `3`).
     * 
     */
    @Import(name="strikesOk")
    private @Nullable Output<Integer> strikesOk;

    /**
     * @return The number of successful healthcheck attempts before considering the target healthy (must be between `1` and `20`; default: `3`).
     * 
     */
    public Optional<Output<Integer>> strikesOk() {
        return Optional.ofNullable(this.strikesOk);
    }

    /**
     * The time before considering a healthcheck probing failed (seconds; must be between `2` and `60`; default: `3`).
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return The time before considering a healthcheck probing failed (seconds; must be between `2` and `60`; default: `3`).
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * Disable TLS certificate verification for healthcheck in `https` mode (boolean; default: `false`).
     * 
     */
    @Import(name="tlsSkipVerify")
    private @Nullable Output<Boolean> tlsSkipVerify;

    /**
     * @return Disable TLS certificate verification for healthcheck in `https` mode (boolean; default: `false`).
     * 
     */
    public Optional<Output<Boolean>> tlsSkipVerify() {
        return Optional.ofNullable(this.tlsSkipVerify);
    }

    /**
     * The healthcheck server name to present with SNI in `https` mode.
     * 
     */
    @Import(name="tlsSni")
    private @Nullable Output<String> tlsSni;

    /**
     * @return The healthcheck server name to present with SNI in `https` mode.
     * 
     */
    public Optional<Output<String>> tlsSni() {
        return Optional.ofNullable(this.tlsSni);
    }

    /**
     * The healthcheck target URI (required in `http(s)` modes).
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return The healthcheck target URI (required in `http(s)` modes).
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private ElasticIPHealthcheckArgs() {}

    private ElasticIPHealthcheckArgs(ElasticIPHealthcheckArgs $) {
        this.interval = $.interval;
        this.mode = $.mode;
        this.port = $.port;
        this.strikesFail = $.strikesFail;
        this.strikesOk = $.strikesOk;
        this.timeout = $.timeout;
        this.tlsSkipVerify = $.tlsSkipVerify;
        this.tlsSni = $.tlsSni;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ElasticIPHealthcheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ElasticIPHealthcheckArgs $;

        public Builder() {
            $ = new ElasticIPHealthcheckArgs();
        }

        public Builder(ElasticIPHealthcheckArgs defaults) {
            $ = new ElasticIPHealthcheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param interval The healthcheck interval (seconds; must be between `5` and `300`; default: `10`).
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The healthcheck interval (seconds; must be between `5` and `300`; default: `10`).
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param mode The healthcheck mode (`tcp`, `http` or `https`; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The healthcheck mode (`tcp`, `http` or `https`; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param port The healthcheck target port (must be between `1` and `65535`).
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The healthcheck target port (must be between `1` and `65535`).
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param strikesFail The number of failed healthcheck attempts before considering the target unhealthy (must be between `1` and `20`; default: `2`).
         * 
         * @return builder
         * 
         */
        public Builder strikesFail(@Nullable Output<Integer> strikesFail) {
            $.strikesFail = strikesFail;
            return this;
        }

        /**
         * @param strikesFail The number of failed healthcheck attempts before considering the target unhealthy (must be between `1` and `20`; default: `2`).
         * 
         * @return builder
         * 
         */
        public Builder strikesFail(Integer strikesFail) {
            return strikesFail(Output.of(strikesFail));
        }

        /**
         * @param strikesOk The number of successful healthcheck attempts before considering the target healthy (must be between `1` and `20`; default: `3`).
         * 
         * @return builder
         * 
         */
        public Builder strikesOk(@Nullable Output<Integer> strikesOk) {
            $.strikesOk = strikesOk;
            return this;
        }

        /**
         * @param strikesOk The number of successful healthcheck attempts before considering the target healthy (must be between `1` and `20`; default: `3`).
         * 
         * @return builder
         * 
         */
        public Builder strikesOk(Integer strikesOk) {
            return strikesOk(Output.of(strikesOk));
        }

        /**
         * @param timeout The time before considering a healthcheck probing failed (seconds; must be between `2` and `60`; default: `3`).
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The time before considering a healthcheck probing failed (seconds; must be between `2` and `60`; default: `3`).
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param tlsSkipVerify Disable TLS certificate verification for healthcheck in `https` mode (boolean; default: `false`).
         * 
         * @return builder
         * 
         */
        public Builder tlsSkipVerify(@Nullable Output<Boolean> tlsSkipVerify) {
            $.tlsSkipVerify = tlsSkipVerify;
            return this;
        }

        /**
         * @param tlsSkipVerify Disable TLS certificate verification for healthcheck in `https` mode (boolean; default: `false`).
         * 
         * @return builder
         * 
         */
        public Builder tlsSkipVerify(Boolean tlsSkipVerify) {
            return tlsSkipVerify(Output.of(tlsSkipVerify));
        }

        /**
         * @param tlsSni The healthcheck server name to present with SNI in `https` mode.
         * 
         * @return builder
         * 
         */
        public Builder tlsSni(@Nullable Output<String> tlsSni) {
            $.tlsSni = tlsSni;
            return this;
        }

        /**
         * @param tlsSni The healthcheck server name to present with SNI in `https` mode.
         * 
         * @return builder
         * 
         */
        public Builder tlsSni(String tlsSni) {
            return tlsSni(Output.of(tlsSni));
        }

        /**
         * @param uri The healthcheck target URI (required in `http(s)` modes).
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The healthcheck target URI (required in `http(s)` modes).
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public ElasticIPHealthcheckArgs build() {
            $.mode = Objects.requireNonNull($.mode, "expected parameter 'mode' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            return $;
        }
    }

}
