// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumiverse.exoscale.inputs.DatabaseKafkaArgs;
import com.pulumiverse.exoscale.inputs.DatabaseMysqlArgs;
import com.pulumiverse.exoscale.inputs.DatabaseOpensearchArgs;
import com.pulumiverse.exoscale.inputs.DatabasePgArgs;
import com.pulumiverse.exoscale.inputs.DatabaseRedisArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseArgs Empty = new DatabaseArgs();

    /**
     * *kafka* database service type specific arguments. Structure is documented below.
     * 
     */
    @Import(name="kafka")
    private @Nullable Output<DatabaseKafkaArgs> kafka;

    /**
     * @return *kafka* database service type specific arguments. Structure is documented below.
     * 
     */
    public Optional<Output<DatabaseKafkaArgs>> kafka() {
        return Optional.ofNullable(this.kafka);
    }

    /**
     * The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
     * 
     */
    @Import(name="maintenanceDow")
    private @Nullable Output<String> maintenanceDow;

    /**
     * @return The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
     * 
     */
    public Optional<Output<String>> maintenanceDow() {
        return Optional.ofNullable(this.maintenanceDow);
    }

    /**
     * The time of day to perform the automated database service maintenance (`HH:MM:SS`)
     * 
     */
    @Import(name="maintenanceTime")
    private @Nullable Output<String> maintenanceTime;

    /**
     * @return The time of day to perform the automated database service maintenance (`HH:MM:SS`)
     * 
     */
    public Optional<Output<String>> maintenanceTime() {
        return Optional.ofNullable(this.maintenanceTime);
    }

    /**
     * *mysql* database service type specific arguments. Structure is documented below.
     * 
     */
    @Import(name="mysql")
    private @Nullable Output<DatabaseMysqlArgs> mysql;

    /**
     * @return *mysql* database service type specific arguments. Structure is documented below.
     * 
     */
    public Optional<Output<DatabaseMysqlArgs>> mysql() {
        return Optional.ofNullable(this.mysql);
    }

    /**
     * The name of the database service.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the database service.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * *opensearch* database service type specific arguments. Structure is documented below.
     * 
     */
    @Import(name="opensearch")
    private @Nullable Output<DatabaseOpensearchArgs> opensearch;

    /**
     * @return *opensearch* database service type specific arguments. Structure is documented below.
     * 
     */
    public Optional<Output<DatabaseOpensearchArgs>> opensearch() {
        return Optional.ofNullable(this.opensearch);
    }

    /**
     * *pg* database service type specific arguments. Structure is documented below.
     * 
     */
    @Import(name="pg")
    private @Nullable Output<DatabasePgArgs> pg;

    /**
     * @return *pg* database service type specific arguments. Structure is documented below.
     * 
     */
    public Optional<Output<DatabasePgArgs>> pg() {
        return Optional.ofNullable(this.pg);
    }

    /**
     * The plan of the database service (use the [Exoscale CLI][cli] - `exo dbaas type show &lt;TYPE&gt;` - for reference).
     * 
     */
    @Import(name="plan", required=true)
    private Output<String> plan;

    /**
     * @return The plan of the database service (use the [Exoscale CLI][cli] - `exo dbaas type show &lt;TYPE&gt;` - for reference).
     * 
     */
    public Output<String> plan() {
        return this.plan;
    }

    /**
     * *redis* database service type specific arguments. Structure is documented below.
     * 
     */
    @Import(name="redis")
    private @Nullable Output<DatabaseRedisArgs> redis;

    /**
     * @return *redis* database service type specific arguments. Structure is documented below.
     * 
     */
    public Optional<Output<DatabaseRedisArgs>> redis() {
        return Optional.ofNullable(this.redis);
    }

    /**
     * The database service protection boolean flag against termination/power-off.
     * 
     */
    @Import(name="terminationProtection")
    private @Nullable Output<Boolean> terminationProtection;

    /**
     * @return The database service protection boolean flag against termination/power-off.
     * 
     */
    public Optional<Output<Boolean>> terminationProtection() {
        return Optional.ofNullable(this.terminationProtection);
    }

    /**
     * The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`).
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`).
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The Exoscale [Zone][zone] name.
     * 
     */
    @Import(name="zone", required=true)
    private Output<String> zone;

    /**
     * @return The Exoscale [Zone][zone] name.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    private DatabaseArgs() {}

    private DatabaseArgs(DatabaseArgs $) {
        this.kafka = $.kafka;
        this.maintenanceDow = $.maintenanceDow;
        this.maintenanceTime = $.maintenanceTime;
        this.mysql = $.mysql;
        this.name = $.name;
        this.opensearch = $.opensearch;
        this.pg = $.pg;
        this.plan = $.plan;
        this.redis = $.redis;
        this.terminationProtection = $.terminationProtection;
        this.type = $.type;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseArgs $;

        public Builder() {
            $ = new DatabaseArgs();
        }

        public Builder(DatabaseArgs defaults) {
            $ = new DatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param kafka *kafka* database service type specific arguments. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder kafka(@Nullable Output<DatabaseKafkaArgs> kafka) {
            $.kafka = kafka;
            return this;
        }

        /**
         * @param kafka *kafka* database service type specific arguments. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder kafka(DatabaseKafkaArgs kafka) {
            return kafka(Output.of(kafka));
        }

        /**
         * @param maintenanceDow The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
         * 
         * @return builder
         * 
         */
        public Builder maintenanceDow(@Nullable Output<String> maintenanceDow) {
            $.maintenanceDow = maintenanceDow;
            return this;
        }

        /**
         * @param maintenanceDow The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
         * 
         * @return builder
         * 
         */
        public Builder maintenanceDow(String maintenanceDow) {
            return maintenanceDow(Output.of(maintenanceDow));
        }

        /**
         * @param maintenanceTime The time of day to perform the automated database service maintenance (`HH:MM:SS`)
         * 
         * @return builder
         * 
         */
        public Builder maintenanceTime(@Nullable Output<String> maintenanceTime) {
            $.maintenanceTime = maintenanceTime;
            return this;
        }

        /**
         * @param maintenanceTime The time of day to perform the automated database service maintenance (`HH:MM:SS`)
         * 
         * @return builder
         * 
         */
        public Builder maintenanceTime(String maintenanceTime) {
            return maintenanceTime(Output.of(maintenanceTime));
        }

        /**
         * @param mysql *mysql* database service type specific arguments. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mysql(@Nullable Output<DatabaseMysqlArgs> mysql) {
            $.mysql = mysql;
            return this;
        }

        /**
         * @param mysql *mysql* database service type specific arguments. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mysql(DatabaseMysqlArgs mysql) {
            return mysql(Output.of(mysql));
        }

        /**
         * @param name The name of the database service.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the database service.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param opensearch *opensearch* database service type specific arguments. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder opensearch(@Nullable Output<DatabaseOpensearchArgs> opensearch) {
            $.opensearch = opensearch;
            return this;
        }

        /**
         * @param opensearch *opensearch* database service type specific arguments. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder opensearch(DatabaseOpensearchArgs opensearch) {
            return opensearch(Output.of(opensearch));
        }

        /**
         * @param pg *pg* database service type specific arguments. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pg(@Nullable Output<DatabasePgArgs> pg) {
            $.pg = pg;
            return this;
        }

        /**
         * @param pg *pg* database service type specific arguments. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pg(DatabasePgArgs pg) {
            return pg(Output.of(pg));
        }

        /**
         * @param plan The plan of the database service (use the [Exoscale CLI][cli] - `exo dbaas type show &lt;TYPE&gt;` - for reference).
         * 
         * @return builder
         * 
         */
        public Builder plan(Output<String> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan The plan of the database service (use the [Exoscale CLI][cli] - `exo dbaas type show &lt;TYPE&gt;` - for reference).
         * 
         * @return builder
         * 
         */
        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param redis *redis* database service type specific arguments. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder redis(@Nullable Output<DatabaseRedisArgs> redis) {
            $.redis = redis;
            return this;
        }

        /**
         * @param redis *redis* database service type specific arguments. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder redis(DatabaseRedisArgs redis) {
            return redis(Output.of(redis));
        }

        /**
         * @param terminationProtection The database service protection boolean flag against termination/power-off.
         * 
         * @return builder
         * 
         */
        public Builder terminationProtection(@Nullable Output<Boolean> terminationProtection) {
            $.terminationProtection = terminationProtection;
            return this;
        }

        /**
         * @param terminationProtection The database service protection boolean flag against termination/power-off.
         * 
         * @return builder
         * 
         */
        public Builder terminationProtection(Boolean terminationProtection) {
            return terminationProtection(Output.of(terminationProtection));
        }

        /**
         * @param type The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`).
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param zone The Exoscale [Zone][zone] name.
         * 
         * @return builder
         * 
         */
        public Builder zone(Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The Exoscale [Zone][zone] name.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public DatabaseArgs build() {
            $.plan = Objects.requireNonNull($.plan, "expected parameter 'plan' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.zone = Objects.requireNonNull($.zone, "expected parameter 'zone' to be non-null");
            return $;
        }
    }

}
