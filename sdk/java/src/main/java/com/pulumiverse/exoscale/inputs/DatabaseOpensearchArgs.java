// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumiverse.exoscale.inputs.DatabaseOpensearchDashboardsArgs;
import com.pulumiverse.exoscale.inputs.DatabaseOpensearchIndexPatternArgs;
import com.pulumiverse.exoscale.inputs.DatabaseOpensearchIndexTemplateArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseOpensearchArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseOpensearchArgs Empty = new DatabaseOpensearchArgs();

    @Import(name="dashboards")
    private @Nullable Output<DatabaseOpensearchDashboardsArgs> dashboards;

    public Optional<Output<DatabaseOpensearchDashboardsArgs>> dashboards() {
        return Optional.ofNullable(this.dashboards);
    }

    /**
     * Service name
     * 
     */
    @Import(name="forkFromService")
    private @Nullable Output<String> forkFromService;

    /**
     * @return Service name
     * 
     */
    public Optional<Output<String>> forkFromService() {
        return Optional.ofNullable(this.forkFromService);
    }

    /**
     * Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like &#39;logs.?&#39; and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note &#39;logs.?&#39; does not apply to logs.10. Note: Setting max_index_count to 0 will do nothing and the pattern gets ignored.
     * 
     */
    @Import(name="indexPatterns")
    private @Nullable Output<List<DatabaseOpensearchIndexPatternArgs>> indexPatterns;

    /**
     * @return Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like &#39;logs.?&#39; and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note &#39;logs.?&#39; does not apply to logs.10. Note: Setting max_index_count to 0 will do nothing and the pattern gets ignored.
     * 
     */
    public Optional<Output<List<DatabaseOpensearchIndexPatternArgs>>> indexPatterns() {
        return Optional.ofNullable(this.indexPatterns);
    }

    /**
     * Template settings for all new indexes
     * 
     */
    @Import(name="indexTemplate")
    private @Nullable Output<DatabaseOpensearchIndexTemplateArgs> indexTemplate;

    /**
     * @return Template settings for all new indexes
     * 
     */
    public Optional<Output<DatabaseOpensearchIndexTemplateArgs>> indexTemplate() {
        return Optional.ofNullable(this.indexTemplate);
    }

    /**
     * A list of CIDR blocks to allow incoming connections from.
     * 
     */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return A list of CIDR blocks to allow incoming connections from.
     * 
     */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
     * 
     */
    @Import(name="keepIndexRefreshInterval")
    private @Nullable Output<Boolean> keepIndexRefreshInterval;

    /**
     * @return Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
     * 
     */
    public Optional<Output<Boolean>> keepIndexRefreshInterval() {
        return Optional.ofNullable(this.keepIndexRefreshInterval);
    }

    /**
     * Maximum number of indexes to keep before deleting the oldest one (Minimum value is `0`)
     * * `dashboards`
     * 
     */
    @Import(name="maxIndexCount")
    private @Nullable Output<Integer> maxIndexCount;

    /**
     * @return Maximum number of indexes to keep before deleting the oldest one (Minimum value is `0`)
     * * `dashboards`
     * 
     */
    public Optional<Output<Integer>> maxIndexCount() {
        return Optional.ofNullable(this.maxIndexCount);
    }

    /**
     * - 
     * 
     */
    @Import(name="recoveryBackupName")
    private @Nullable Output<String> recoveryBackupName;

    /**
     * @return -
     * 
     */
    public Optional<Output<String>> recoveryBackupName() {
        return Optional.ofNullable(this.recoveryBackupName);
    }

    @Import(name="settings")
    private @Nullable Output<String> settings;

    public Optional<Output<String>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private DatabaseOpensearchArgs() {}

    private DatabaseOpensearchArgs(DatabaseOpensearchArgs $) {
        this.dashboards = $.dashboards;
        this.forkFromService = $.forkFromService;
        this.indexPatterns = $.indexPatterns;
        this.indexTemplate = $.indexTemplate;
        this.ipFilters = $.ipFilters;
        this.keepIndexRefreshInterval = $.keepIndexRefreshInterval;
        this.maxIndexCount = $.maxIndexCount;
        this.recoveryBackupName = $.recoveryBackupName;
        this.settings = $.settings;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseOpensearchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseOpensearchArgs $;

        public Builder() {
            $ = new DatabaseOpensearchArgs();
        }

        public Builder(DatabaseOpensearchArgs defaults) {
            $ = new DatabaseOpensearchArgs(Objects.requireNonNull(defaults));
        }

        public Builder dashboards(@Nullable Output<DatabaseOpensearchDashboardsArgs> dashboards) {
            $.dashboards = dashboards;
            return this;
        }

        public Builder dashboards(DatabaseOpensearchDashboardsArgs dashboards) {
            return dashboards(Output.of(dashboards));
        }

        /**
         * @param forkFromService Service name
         * 
         * @return builder
         * 
         */
        public Builder forkFromService(@Nullable Output<String> forkFromService) {
            $.forkFromService = forkFromService;
            return this;
        }

        /**
         * @param forkFromService Service name
         * 
         * @return builder
         * 
         */
        public Builder forkFromService(String forkFromService) {
            return forkFromService(Output.of(forkFromService));
        }

        /**
         * @param indexPatterns Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like &#39;logs.?&#39; and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note &#39;logs.?&#39; does not apply to logs.10. Note: Setting max_index_count to 0 will do nothing and the pattern gets ignored.
         * 
         * @return builder
         * 
         */
        public Builder indexPatterns(@Nullable Output<List<DatabaseOpensearchIndexPatternArgs>> indexPatterns) {
            $.indexPatterns = indexPatterns;
            return this;
        }

        /**
         * @param indexPatterns Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like &#39;logs.?&#39; and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note &#39;logs.?&#39; does not apply to logs.10. Note: Setting max_index_count to 0 will do nothing and the pattern gets ignored.
         * 
         * @return builder
         * 
         */
        public Builder indexPatterns(List<DatabaseOpensearchIndexPatternArgs> indexPatterns) {
            return indexPatterns(Output.of(indexPatterns));
        }

        /**
         * @param indexPatterns Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like &#39;logs.?&#39; and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note &#39;logs.?&#39; does not apply to logs.10. Note: Setting max_index_count to 0 will do nothing and the pattern gets ignored.
         * 
         * @return builder
         * 
         */
        public Builder indexPatterns(DatabaseOpensearchIndexPatternArgs... indexPatterns) {
            return indexPatterns(List.of(indexPatterns));
        }

        /**
         * @param indexTemplate Template settings for all new indexes
         * 
         * @return builder
         * 
         */
        public Builder indexTemplate(@Nullable Output<DatabaseOpensearchIndexTemplateArgs> indexTemplate) {
            $.indexTemplate = indexTemplate;
            return this;
        }

        /**
         * @param indexTemplate Template settings for all new indexes
         * 
         * @return builder
         * 
         */
        public Builder indexTemplate(DatabaseOpensearchIndexTemplateArgs indexTemplate) {
            return indexTemplate(Output.of(indexTemplate));
        }

        /**
         * @param ipFilters A list of CIDR blocks to allow incoming connections from.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters A list of CIDR blocks to allow incoming connections from.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters A list of CIDR blocks to allow incoming connections from.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param keepIndexRefreshInterval Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
         * 
         * @return builder
         * 
         */
        public Builder keepIndexRefreshInterval(@Nullable Output<Boolean> keepIndexRefreshInterval) {
            $.keepIndexRefreshInterval = keepIndexRefreshInterval;
            return this;
        }

        /**
         * @param keepIndexRefreshInterval Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
         * 
         * @return builder
         * 
         */
        public Builder keepIndexRefreshInterval(Boolean keepIndexRefreshInterval) {
            return keepIndexRefreshInterval(Output.of(keepIndexRefreshInterval));
        }

        /**
         * @param maxIndexCount Maximum number of indexes to keep before deleting the oldest one (Minimum value is `0`)
         * * `dashboards`
         * 
         * @return builder
         * 
         */
        public Builder maxIndexCount(@Nullable Output<Integer> maxIndexCount) {
            $.maxIndexCount = maxIndexCount;
            return this;
        }

        /**
         * @param maxIndexCount Maximum number of indexes to keep before deleting the oldest one (Minimum value is `0`)
         * * `dashboards`
         * 
         * @return builder
         * 
         */
        public Builder maxIndexCount(Integer maxIndexCount) {
            return maxIndexCount(Output.of(maxIndexCount));
        }

        /**
         * @param recoveryBackupName -
         * 
         * @return builder
         * 
         */
        public Builder recoveryBackupName(@Nullable Output<String> recoveryBackupName) {
            $.recoveryBackupName = recoveryBackupName;
            return this;
        }

        /**
         * @param recoveryBackupName -
         * 
         * @return builder
         * 
         */
        public Builder recoveryBackupName(String recoveryBackupName) {
            return recoveryBackupName(Output.of(recoveryBackupName));
        }

        public Builder settings(@Nullable Output<String> settings) {
            $.settings = settings;
            return this;
        }

        public Builder settings(String settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param version PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public DatabaseOpensearchArgs build() {
            return $;
        }
    }

}
