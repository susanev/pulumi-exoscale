// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ComputeInstanceNetworkInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ComputeInstanceNetworkInterfaceArgs Empty = new ComputeInstanceNetworkInterfaceArgs();

    /**
     * The IPv4 address to request as static DHCP lease if the network interface is attached to a *managed* private network.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The IPv4 address to request as static DHCP lease if the network interface is attached to a *managed* private network.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The exoscale.PrivateNetwork (ID) to attach to the instance.
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return The exoscale.PrivateNetwork (ID) to attach to the instance.
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    private ComputeInstanceNetworkInterfaceArgs() {}

    private ComputeInstanceNetworkInterfaceArgs(ComputeInstanceNetworkInterfaceArgs $) {
        this.ipAddress = $.ipAddress;
        this.networkId = $.networkId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComputeInstanceNetworkInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComputeInstanceNetworkInterfaceArgs $;

        public Builder() {
            $ = new ComputeInstanceNetworkInterfaceArgs();
        }

        public Builder(ComputeInstanceNetworkInterfaceArgs defaults) {
            $ = new ComputeInstanceNetworkInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipAddress The IPv4 address to request as static DHCP lease if the network interface is attached to a *managed* private network.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The IPv4 address to request as static DHCP lease if the network interface is attached to a *managed* private network.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param networkId The exoscale.PrivateNetwork (ID) to attach to the instance.
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId The exoscale.PrivateNetwork (ID) to attach to the instance.
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        public ComputeInstanceNetworkInterfaceArgs build() {
            $.networkId = Objects.requireNonNull($.networkId, "expected parameter 'networkId' to be non-null");
            return $;
        }
    }

}
