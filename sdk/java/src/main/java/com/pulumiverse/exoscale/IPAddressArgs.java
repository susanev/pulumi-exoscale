// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IPAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final IPAddressArgs Empty = new IPAddressArgs();

    /**
     * A free-form text describing the Elastic IP (EIP).
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A free-form text describing the Elastic IP (EIP).
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The healthcheck probing interval (seconds; must be between `5` and `300`).
     * 
     */
    @Import(name="healthcheckInterval")
    private @Nullable Output<Integer> healthcheckInterval;

    /**
     * @return The healthcheck probing interval (seconds; must be between `5` and `300`).
     * 
     */
    public Optional<Output<Integer>> healthcheckInterval() {
        return Optional.ofNullable(this.healthcheckInterval);
    }

    /**
     * The healthcheck probing mode (must be `tcp`, `http` or `https`).
     * 
     */
    @Import(name="healthcheckMode")
    private @Nullable Output<String> healthcheckMode;

    /**
     * @return The healthcheck probing mode (must be `tcp`, `http` or `https`).
     * 
     */
    public Optional<Output<String>> healthcheckMode() {
        return Optional.ofNullable(this.healthcheckMode);
    }

    /**
     * The healthcheck probe HTTP request path (must be specified in `http`/`https` modes).
     * 
     */
    @Import(name="healthcheckPath")
    private @Nullable Output<String> healthcheckPath;

    /**
     * @return The healthcheck probe HTTP request path (must be specified in `http`/`https` modes).
     * 
     */
    public Optional<Output<String>> healthcheckPath() {
        return Optional.ofNullable(this.healthcheckPath);
    }

    /**
     * The healthcheck service port to probe (must be between `1` and `65535`).
     * 
     */
    @Import(name="healthcheckPort")
    private @Nullable Output<Integer> healthcheckPort;

    /**
     * @return The healthcheck service port to probe (must be between `1` and `65535`).
     * 
     */
    public Optional<Output<Integer>> healthcheckPort() {
        return Optional.ofNullable(this.healthcheckPort);
    }

    /**
     * The number of unsuccessful healthcheck probes before considering the target unhealthy (must be between `1` and `20`).
     * 
     */
    @Import(name="healthcheckStrikesFail")
    private @Nullable Output<Integer> healthcheckStrikesFail;

    /**
     * @return The number of unsuccessful healthcheck probes before considering the target unhealthy (must be between `1` and `20`).
     * 
     */
    public Optional<Output<Integer>> healthcheckStrikesFail() {
        return Optional.ofNullable(this.healthcheckStrikesFail);
    }

    /**
     * The number of successful healthcheck probes before considering the target healthy (must be between `1` and `20`).
     * 
     */
    @Import(name="healthcheckStrikesOk")
    private @Nullable Output<Integer> healthcheckStrikesOk;

    /**
     * @return The number of successful healthcheck probes before considering the target healthy (must be between `1` and `20`).
     * 
     */
    public Optional<Output<Integer>> healthcheckStrikesOk() {
        return Optional.ofNullable(this.healthcheckStrikesOk);
    }

    /**
     * The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`).
     * 
     */
    @Import(name="healthcheckTimeout")
    private @Nullable Output<Integer> healthcheckTimeout;

    /**
     * @return The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`).
     * 
     */
    public Optional<Output<Integer>> healthcheckTimeout() {
        return Optional.ofNullable(this.healthcheckTimeout);
    }

    /**
     * Disable TLS certificate validation in `https` mode (boolean; default: `false`). Note: this parameter can only be changed to `true`, it cannot be reset to `false` later on (requires a resource re-creation).
     * 
     */
    @Import(name="healthcheckTlsSkipVerify")
    private @Nullable Output<Boolean> healthcheckTlsSkipVerify;

    /**
     * @return Disable TLS certificate validation in `https` mode (boolean; default: `false`). Note: this parameter can only be changed to `true`, it cannot be reset to `false` later on (requires a resource re-creation).
     * 
     */
    public Optional<Output<Boolean>> healthcheckTlsSkipVerify() {
        return Optional.ofNullable(this.healthcheckTlsSkipVerify);
    }

    /**
     * The healthcheck TLS server name to specify in `https` mode. Note: this parameter can only be changed to a non-empty value, it cannot be reset to its default empty value later on (requires a resource re-creation).
     * 
     */
    @Import(name="healthcheckTlsSni")
    private @Nullable Output<String> healthcheckTlsSni;

    /**
     * @return The healthcheck TLS server name to specify in `https` mode. Note: this parameter can only be changed to a non-empty value, it cannot be reset to its default empty value later on (requires a resource re-creation).
     * 
     */
    public Optional<Output<String>> healthcheckTlsSni() {
        return Optional.ofNullable(this.healthcheckTlsSni);
    }

    /**
     * The EIP reverse DNS record (must end with a `.`; e.g: `my-eip.example.net.`).
     * 
     */
    @Import(name="reverseDns")
    private @Nullable Output<String> reverseDns;

    /**
     * @return The EIP reverse DNS record (must end with a `.`; e.g: `my-eip.example.net.`).
     * 
     */
    public Optional<Output<String>> reverseDns() {
        return Optional.ofNullable(this.reverseDns);
    }

    /**
     * A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The Exoscale Zone name
     * 
     */
    @Import(name="zone", required=true)
    private Output<String> zone;

    /**
     * @return The Exoscale Zone name
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    private IPAddressArgs() {}

    private IPAddressArgs(IPAddressArgs $) {
        this.description = $.description;
        this.healthcheckInterval = $.healthcheckInterval;
        this.healthcheckMode = $.healthcheckMode;
        this.healthcheckPath = $.healthcheckPath;
        this.healthcheckPort = $.healthcheckPort;
        this.healthcheckStrikesFail = $.healthcheckStrikesFail;
        this.healthcheckStrikesOk = $.healthcheckStrikesOk;
        this.healthcheckTimeout = $.healthcheckTimeout;
        this.healthcheckTlsSkipVerify = $.healthcheckTlsSkipVerify;
        this.healthcheckTlsSni = $.healthcheckTlsSni;
        this.reverseDns = $.reverseDns;
        this.tags = $.tags;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IPAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IPAddressArgs $;

        public Builder() {
            $ = new IPAddressArgs();
        }

        public Builder(IPAddressArgs defaults) {
            $ = new IPAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A free-form text describing the Elastic IP (EIP).
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A free-form text describing the Elastic IP (EIP).
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param healthcheckInterval The healthcheck probing interval (seconds; must be between `5` and `300`).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckInterval(@Nullable Output<Integer> healthcheckInterval) {
            $.healthcheckInterval = healthcheckInterval;
            return this;
        }

        /**
         * @param healthcheckInterval The healthcheck probing interval (seconds; must be between `5` and `300`).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckInterval(Integer healthcheckInterval) {
            return healthcheckInterval(Output.of(healthcheckInterval));
        }

        /**
         * @param healthcheckMode The healthcheck probing mode (must be `tcp`, `http` or `https`).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckMode(@Nullable Output<String> healthcheckMode) {
            $.healthcheckMode = healthcheckMode;
            return this;
        }

        /**
         * @param healthcheckMode The healthcheck probing mode (must be `tcp`, `http` or `https`).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckMode(String healthcheckMode) {
            return healthcheckMode(Output.of(healthcheckMode));
        }

        /**
         * @param healthcheckPath The healthcheck probe HTTP request path (must be specified in `http`/`https` modes).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckPath(@Nullable Output<String> healthcheckPath) {
            $.healthcheckPath = healthcheckPath;
            return this;
        }

        /**
         * @param healthcheckPath The healthcheck probe HTTP request path (must be specified in `http`/`https` modes).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckPath(String healthcheckPath) {
            return healthcheckPath(Output.of(healthcheckPath));
        }

        /**
         * @param healthcheckPort The healthcheck service port to probe (must be between `1` and `65535`).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckPort(@Nullable Output<Integer> healthcheckPort) {
            $.healthcheckPort = healthcheckPort;
            return this;
        }

        /**
         * @param healthcheckPort The healthcheck service port to probe (must be between `1` and `65535`).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckPort(Integer healthcheckPort) {
            return healthcheckPort(Output.of(healthcheckPort));
        }

        /**
         * @param healthcheckStrikesFail The number of unsuccessful healthcheck probes before considering the target unhealthy (must be between `1` and `20`).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckStrikesFail(@Nullable Output<Integer> healthcheckStrikesFail) {
            $.healthcheckStrikesFail = healthcheckStrikesFail;
            return this;
        }

        /**
         * @param healthcheckStrikesFail The number of unsuccessful healthcheck probes before considering the target unhealthy (must be between `1` and `20`).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckStrikesFail(Integer healthcheckStrikesFail) {
            return healthcheckStrikesFail(Output.of(healthcheckStrikesFail));
        }

        /**
         * @param healthcheckStrikesOk The number of successful healthcheck probes before considering the target healthy (must be between `1` and `20`).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckStrikesOk(@Nullable Output<Integer> healthcheckStrikesOk) {
            $.healthcheckStrikesOk = healthcheckStrikesOk;
            return this;
        }

        /**
         * @param healthcheckStrikesOk The number of successful healthcheck probes before considering the target healthy (must be between `1` and `20`).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckStrikesOk(Integer healthcheckStrikesOk) {
            return healthcheckStrikesOk(Output.of(healthcheckStrikesOk));
        }

        /**
         * @param healthcheckTimeout The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckTimeout(@Nullable Output<Integer> healthcheckTimeout) {
            $.healthcheckTimeout = healthcheckTimeout;
            return this;
        }

        /**
         * @param healthcheckTimeout The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckTimeout(Integer healthcheckTimeout) {
            return healthcheckTimeout(Output.of(healthcheckTimeout));
        }

        /**
         * @param healthcheckTlsSkipVerify Disable TLS certificate validation in `https` mode (boolean; default: `false`). Note: this parameter can only be changed to `true`, it cannot be reset to `false` later on (requires a resource re-creation).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckTlsSkipVerify(@Nullable Output<Boolean> healthcheckTlsSkipVerify) {
            $.healthcheckTlsSkipVerify = healthcheckTlsSkipVerify;
            return this;
        }

        /**
         * @param healthcheckTlsSkipVerify Disable TLS certificate validation in `https` mode (boolean; default: `false`). Note: this parameter can only be changed to `true`, it cannot be reset to `false` later on (requires a resource re-creation).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckTlsSkipVerify(Boolean healthcheckTlsSkipVerify) {
            return healthcheckTlsSkipVerify(Output.of(healthcheckTlsSkipVerify));
        }

        /**
         * @param healthcheckTlsSni The healthcheck TLS server name to specify in `https` mode. Note: this parameter can only be changed to a non-empty value, it cannot be reset to its default empty value later on (requires a resource re-creation).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckTlsSni(@Nullable Output<String> healthcheckTlsSni) {
            $.healthcheckTlsSni = healthcheckTlsSni;
            return this;
        }

        /**
         * @param healthcheckTlsSni The healthcheck TLS server name to specify in `https` mode. Note: this parameter can only be changed to a non-empty value, it cannot be reset to its default empty value later on (requires a resource re-creation).
         * 
         * @return builder
         * 
         */
        public Builder healthcheckTlsSni(String healthcheckTlsSni) {
            return healthcheckTlsSni(Output.of(healthcheckTlsSni));
        }

        /**
         * @param reverseDns The EIP reverse DNS record (must end with a `.`; e.g: `my-eip.example.net.`).
         * 
         * @return builder
         * 
         */
        public Builder reverseDns(@Nullable Output<String> reverseDns) {
            $.reverseDns = reverseDns;
            return this;
        }

        /**
         * @param reverseDns The EIP reverse DNS record (must end with a `.`; e.g: `my-eip.example.net.`).
         * 
         * @return builder
         * 
         */
        public Builder reverseDns(String reverseDns) {
            return reverseDns(Output.of(reverseDns));
        }

        /**
         * @param tags A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param zone The Exoscale Zone name
         * 
         * @return builder
         * 
         */
        public Builder zone(Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The Exoscale Zone name
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public IPAddressArgs build() {
            $.zone = Objects.requireNonNull($.zone, "expected parameter 'zone' to be non-null");
            return $;
        }
    }

}
