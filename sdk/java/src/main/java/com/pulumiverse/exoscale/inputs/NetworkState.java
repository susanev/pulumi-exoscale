// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.exoscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkState Empty = new NetworkState();

    /**
     * A free-form text describing the network.
     * 
     */
    @Import(name="displayText")
    private @Nullable Output<String> displayText;

    /**
     * @return A free-form text describing the network.
     * 
     */
    public Optional<Output<String>> displayText() {
        return Optional.ofNullable(this.displayText);
    }

    @Import(name="endIp")
    private @Nullable Output<String> endIp;

    public Optional<Output<String>> endIp() {
        return Optional.ofNullable(this.endIp);
    }

    /**
     * The private network name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The private network name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The network mask defining the IP network allowed for static leases (see `exoscale.NIC` resource). Required for *managed* private networks.
     * * `start_ip`/`end_ip` - The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
     * 
     */
    @Import(name="netmask")
    private @Nullable Output<String> netmask;

    /**
     * @return The network mask defining the IP network allowed for static leases (see `exoscale.NIC` resource). Required for *managed* private networks.
     * * `start_ip`/`end_ip` - The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
     * 
     */
    public Optional<Output<String>> netmask() {
        return Optional.ofNullable(this.netmask);
    }

    /**
     * @deprecated
     * This attribute is deprecated, please remove it from your configuration.
     * 
     */
    @Deprecated /* This attribute is deprecated, please remove it from your configuration. */
    @Import(name="networkOffering")
    private @Nullable Output<String> networkOffering;

    /**
     * @deprecated
     * This attribute is deprecated, please remove it from your configuration.
     * 
     */
    @Deprecated /* This attribute is deprecated, please remove it from your configuration. */
    public Optional<Output<String>> networkOffering() {
        return Optional.ofNullable(this.networkOffering);
    }

    @Import(name="startIp")
    private @Nullable Output<String> startIp;

    public Optional<Output<String>> startIp() {
        return Optional.ofNullable(this.startIp);
    }

    /**
     * A map of tags (key/value). To remove all tags, set `tags = {}`.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags (key/value). To remove all tags, set `tags = {}`.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The Exoscale Zone name.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The Exoscale Zone name.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private NetworkState() {}

    private NetworkState(NetworkState $) {
        this.displayText = $.displayText;
        this.endIp = $.endIp;
        this.name = $.name;
        this.netmask = $.netmask;
        this.networkOffering = $.networkOffering;
        this.startIp = $.startIp;
        this.tags = $.tags;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkState $;

        public Builder() {
            $ = new NetworkState();
        }

        public Builder(NetworkState defaults) {
            $ = new NetworkState(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayText A free-form text describing the network.
         * 
         * @return builder
         * 
         */
        public Builder displayText(@Nullable Output<String> displayText) {
            $.displayText = displayText;
            return this;
        }

        /**
         * @param displayText A free-form text describing the network.
         * 
         * @return builder
         * 
         */
        public Builder displayText(String displayText) {
            return displayText(Output.of(displayText));
        }

        public Builder endIp(@Nullable Output<String> endIp) {
            $.endIp = endIp;
            return this;
        }

        public Builder endIp(String endIp) {
            return endIp(Output.of(endIp));
        }

        /**
         * @param name The private network name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The private network name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param netmask The network mask defining the IP network allowed for static leases (see `exoscale.NIC` resource). Required for *managed* private networks.
         * * `start_ip`/`end_ip` - The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
         * 
         * @return builder
         * 
         */
        public Builder netmask(@Nullable Output<String> netmask) {
            $.netmask = netmask;
            return this;
        }

        /**
         * @param netmask The network mask defining the IP network allowed for static leases (see `exoscale.NIC` resource). Required for *managed* private networks.
         * * `start_ip`/`end_ip` - The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
         * 
         * @return builder
         * 
         */
        public Builder netmask(String netmask) {
            return netmask(Output.of(netmask));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This attribute is deprecated, please remove it from your configuration.
         * 
         */
        @Deprecated /* This attribute is deprecated, please remove it from your configuration. */
        public Builder networkOffering(@Nullable Output<String> networkOffering) {
            $.networkOffering = networkOffering;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This attribute is deprecated, please remove it from your configuration.
         * 
         */
        @Deprecated /* This attribute is deprecated, please remove it from your configuration. */
        public Builder networkOffering(String networkOffering) {
            return networkOffering(Output.of(networkOffering));
        }

        public Builder startIp(@Nullable Output<String> startIp) {
            $.startIp = startIp;
            return this;
        }

        public Builder startIp(String startIp) {
            return startIp(Output.of(startIp));
        }

        /**
         * @param tags A map of tags (key/value). To remove all tags, set `tags = {}`.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags (key/value). To remove all tags, set `tags = {}`.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param zone The Exoscale Zone name.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The Exoscale Zone name.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public NetworkState build() {
            return $;
        }
    }

}
